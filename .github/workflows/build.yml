name: Build Kaisa ROM

on:
  push:
    branches: [ main ]
    paths:
      - 'coreboot/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name (e.g., kaisa-v1.0)'
        required: false
        default: 'kaisa-v1.1,配置CONFIG_EDK2_NETWORK_PXE_SUPPORT=y，支持PXE启动'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Cache Docker image
      uses: actions/cache@v3
      with:
        path: ~/.docker
        key: docker-coreboot-sdk-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          docker-coreboot-sdk-
    
    - name: Pull Docker image
      run: |
        echo "🐳 Pulling coreboot/coreboot-sdk Docker image..."
        docker pull coreboot/coreboot-sdk:latest
        echo "✅ Docker image ready"
    
    - name: Cache coreboot source
      uses: actions/cache@v3
      with:
        path: coreboot
        key: coreboot-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          coreboot-
    
    - name: Clone MrChromebox coreboot
      run: |
        echo "📥 Cloning MrChromebox coreboot repository..."
        if [ ! -d "coreboot" ]; then
          echo "📥 Cache miss, cloning repository..."
          git clone https://github.com/mrchromebox/coreboot.git
        else
          echo "✅ Cache hit, using cached repository"
        fi
        
        cd coreboot
        echo "📦 Updating submodules..."
        git submodule update --init --checkout --recursive
        echo "🔧 Setting proper permissions..."
        chmod -R 755 .
        echo "✅ Source code ready"
    
    - name: Apply custom modifications 01
      run: |
        echo "🔧 Applying custom modifications to coreboot source..."
        echo "📝 Applying RTL8168 driver fixes and EDK2 configurations"
        
        # 更新主板配置文件
        echo "🔧 Updating Kaisa board configuration..."
        CONFIG_FILE="coreboot/configs/cml/config.kaisa.uefi"
        

        echo "📝 Adding CONFIG_EDK2_NETWORK_PXE_SUPPORT=y to configuration..."
        echo "" >> "$CONFIG_FILE"
        echo "# EDK2 Network PXE Support" >> "$CONFIG_FILE"
        echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> "$CONFIG_FILE"

        
        echo "✅ Kaisa board configuration updated"
        echo "✅ Custom modifications step completed"
    
    - name: Verify source modifications 01
      run: |
        echo "🔍 Verifying source modifications..."
        echo "📝 Verifying that all custom modifications were applied correctly"
        
        # 验证主板配置文件 - 参考 build-uefi.sh 流程
        echo "🔍 Verifying Kaisa board configuration..."
        cd coreboot
        
        # 复制配置文件到根目录（参考 build-uefi.sh 第31行）
        cfg_file="configs/cml/config.kaisa.uefi"
        echo "📋 Copying $cfg_file to .config"
        cp "$cfg_file" .config
        
        # 添加版本信息（参考 build-uefi.sh 第32行）
        rev=$(git describe --tags --dirty)
        echo "CONFIG_LOCALVERSION=\"${rev}\"" >> .config
        
        # 执行 make clean 和 make olddefconfig（参考 build-uefi.sh 第33-34行）
        echo "🧹 Running make clean..."
        make clean
        
        echo "⚙️ Running make olddefconfig..."
        make olddefconfig
        
        # 验证 .config 文件中的配置
        echo "🔍 Verifying CONFIG_EDK2_NETWORK_PXE_SUPPORT in .config..."
        if grep -q "^CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" .config; then
          echo "✅ CONFIG_EDK2_NETWORK_PXE_SUPPORT=y is correctly configured in .config"
        else
          echo "❌ CONFIG_EDK2_NETWORK_PXE_SUPPORT=y is not found or not enabled in .config"
          echo "📋 Current .config EDK2 Network configuration:"
          grep -n "CONFIG_EDK2.*NETWORK\|CONFIG_EDK2.*PXE" .config || echo "  No EDK2 network configs found"
          exit 1
        fi
        
        # 显示相关配置信息
        echo "📋 EDK2 Network configuration in .config:"
        grep -n "CONFIG_EDK2.*NETWORK\|CONFIG_EDK2.*PXE" .config || echo "  No additional network configs found"
        
        echo "✅ Source modifications verification completed"
    
    - name: Apply EDK2 customizations
      run: |
        echo "🔧 Applying EDK2 customizations..."
        echo "📋 Current EDK2 configuration:"
        if [ -f "configs/cml/config.kaisa.uefi" ]; then
          echo "✅ Kaisa UEFI config found"
          echo "📋 EDK2 Network settings:"
          grep -E "CONFIG_EDK2.*NETWORK|CONFIG_EDK2.*PXE|CONFIG_EDK2.*CUSTOM" configs/cml/config.kaisa.uefi || echo "No EDK2 network config found"
        else
          echo "❌ Kaisa UEFI config not found"
        fi
        
        # TODO: Add EDK2-specific modifications here
        # Example: Modify EDK2 network settings, PXE configuration, etc.
        echo "✅ EDK2 customizations completed"
    
    - name: Verify EDK2 customizations
      run: |
        echo "🔍 Verifying EDK2 customizations..."
        echo "📋 Checking EDK2 configuration files:"
        
        # Check if EDK2 config exists
        if [ -f "configs/cml/config.kaisa.uefi" ]; then
          echo "✅ Kaisa UEFI config exists"
          
          # Check for key EDK2 settings
          echo "🔍 Checking EDK2 network settings:"
          if grep -q "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" configs/cml/config.kaisa.uefi; then
            echo "✅ PXE support enabled"
          else
            echo "❌ PXE support not found"
          fi
          
          if grep -q "CONFIG_EDK2_LOAD_OPTION_ROMS=y" configs/cml/config.kaisa.uefi; then
            echo "✅ Option ROMs enabled"
          else
            echo "❌ Option ROMs not found"
          fi
          
          if grep -q "CONFIG_EDK2_CUSTOM_BUILD_PARAMS" configs/cml/config.kaisa.uefi; then
            echo "✅ Custom build parameters found"
            echo "📋 Custom build parameters:"
            grep "CONFIG_EDK2_CUSTOM_BUILD_PARAMS" configs/cml/config.kaisa.uefi
          else
            echo "❌ Custom build parameters not found"
          fi
          
          # Check for other EDK2 settings
          echo "🔍 Checking other EDK2 settings:"
          if grep -q "CONFIG_EDK2_BOOT_TIMEOUT" configs/cml/config.kaisa.uefi; then
            echo "✅ Boot timeout configured"
            grep "CONFIG_EDK2_BOOT_TIMEOUT" configs/cml/config.kaisa.uefi
          else
            echo "❌ Boot timeout not configured"
          fi
          
          if grep -q "CONFIG_EDK2_BOOT_MANAGER_ESCAPE" configs/cml/config.kaisa.uefi; then
            echo "✅ Boot manager escape configured"
            grep "CONFIG_EDK2_BOOT_MANAGER_ESCAPE" configs/cml/config.kaisa.uefi
          else
            echo "❌ Boot manager escape not configured"
          fi
        else
          echo "❌ Kaisa UEFI config not found"
        fi
        
        echo "✅ EDK2 customizations verified"
    
    - name: Build Kaisa ROM with Docker
      run: |
        echo "🚀 Building Kaisa ROM: ${{ github.event.inputs.release_name || 'kaisa' }}"
        echo "🐳 Using coreboot/coreboot-sdk Docker image..."
        
        cd coreboot
        
        # Create output directory
        mkdir -p ../roms
        
        # Build using Docker
        docker run --rm --user root -v "$(pwd)":/home/coreboot/coreboot -v "$(pwd)/../roms":/home/coreboot/roms -w /home/coreboot/coreboot coreboot/coreboot-sdk:latest bash -c "
          echo '🔧 Building Kaisa ROM...'
          git config --global --add safe.directory /home/coreboot/coreboot
          ./build-uefi.sh kaisa
          echo '✅ Build completed'
        "
        
        # 检查生成的文件
        echo "📋 Checking generated files in roms directory:"
        ls -la roms/ || echo "roms directory not found"
        echo "📋 Looking for .sha1 files:"
        find roms/ -name "*.sha1" -type f || echo "No .sha1 files found"
        
        echo "✅ ROM build completed"
    
    - name: Upload ROM
      run: |
        echo "📋 Files to upload:"
        echo "ROM files:"
        ls -la roms/*.rom || echo "No ROM files found"
        echo "SHA1 files:"
        ls -la roms/*.sha1 || echo "No SHA1 files found"
        echo "All files in roms directory:"
        ls -la roms/
        
        echo "📤 Uploading artifacts..."
    
    - name: Upload ROM Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kaisa-rom
        path: |
          roms/*.rom
          roms/*.sha1
        compression-level: 0
    
    - name: Create Release
      if: ${{ (github.event_name == 'workflow_dispatch' && inputs.release) || (github.event_name != 'workflow_dispatch') }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: kaisa-${{ github.run_number }}
        name: "${{ github.event.inputs.release_name || 'Coreboot Kaisa ROM' }} #${{ github.run_number }}"
        body: |
          # 🎯 Kaisa ROM 构建成功
          
          ## 🔧 构建信息
          - **主板型号**: Google Kaisa (Puff)
          - **构建时间**: ${{ github.event.repository.updated_at }}
          - **构建编号**: #${{ github.run_number }}
          
          ## 📦 包含文件
          - `coreboot.rom` - 主固件文件
          - `coreboot.rom.sha1` - SHA1 校验文件
          
          ## 🚀 使用方法
          1. 下载 `coreboot.rom` 文件
          2. 使用刷写工具刷入主板
          3. 重启后即可使用
          
          ## ⚠️ 注意事项
          - 刷写前请备份原始固件
          - 确保主板型号为 Google Kaisa
          - 刷写失败可能导致主板无法启动
        files: |
          roms/*.rom
          roms/*.sha1
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
