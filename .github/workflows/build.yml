name: Build Kaisa ROM

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name (e.g., kaisa-v1.0)'
        required: false
        default: 'kaisa-v1.2,定制编译网卡驱动'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Cache Docker image
      uses: actions/cache@v3
      with:
        path: ~/.docker
        key: docker-coreboot-sdk-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          docker-coreboot-sdk-
    
    - name: Pull Docker image
      run: |
        echo "🐳 Pulling coreboot/coreboot-sdk Docker image..."
        docker pull coreboot/coreboot-sdk:latest
        echo "✅ Docker image ready"
    
    - name: Cache coreboot source
      uses: actions/cache@v3
      with:
        path: coreboot
        key: coreboot-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          coreboot-
    
    - name: Clone MrChromebox coreboot
      run: |
        echo "📥 Cloning MrChromebox coreboot repository..."
        if [ ! -d "coreboot" ]; then
          echo "📥 Cache miss, cloning repository..."
          git clone https://github.com/mrchromebox/coreboot.git
        else
          echo "✅ Cache hit, using cached repository"
        fi
        
        cd coreboot
        echo "📦 Updating submodules..."
        git submodule update --init --checkout --recursive
        echo "🔧 Setting proper permissions..."
        chmod -R 755 .
        echo "✅ Source code ready"
    
    - name: "Step 1: Fix RTL8168 dependencies in puff/Kconfig"
      run: |
        echo "🔧 Step 1: Fixing RTL8168 dependencies in puff/Kconfig..."
        echo "📝 Adding missing dependencies for RTL8168 ERI programming"
        
        cd coreboot
        PUFF_KCONFIG="src/mainboard/google/puff/Kconfig"
        
        # 检查并添加 REALTEK_8168_RESET 依赖
        if ! grep -q "select REALTEK_8168_RESET" "$PUFF_KCONFIG"; then
          echo "📝 Adding REALTEK_8168_RESET dependency..."
          sed -i '/select RT8168_GEN_ACPI_POWER_RESOURCE/a\\tselect REALTEK_8168_RESET' "$PUFF_KCONFIG"
          echo "✅ REALTEK_8168_RESET dependency added"
        else
          echo "✅ REALTEK_8168_RESET already present"
        fi
        
        # 检查并添加 RT8168_SUPPORT_LEGACY_VPD_MAC 支持
        if ! grep -q "select RT8168_SUPPORT_LEGACY_VPD_MAC" "$PUFF_KCONFIG"; then
          echo "📝 Adding RT8168_SUPPORT_LEGACY_VPD_MAC support..."
          sed -i '/select RT8168_SET_LED_MODE/a\\tselect RT8168_SUPPORT_LEGACY_VPD_MAC' "$PUFF_KCONFIG"
          echo "✅ RT8168_SUPPORT_LEGACY_VPD_MAC support added"
        else
          echo "✅ RT8168_SUPPORT_LEGACY_VPD_MAC already present"
        fi
        
        # 检查并添加 RT8168_GET_MAC_FROM_VPD 支持
        if ! grep -q "select RT8168_GET_MAC_FROM_VPD" "$PUFF_KCONFIG"; then
          echo "📝 Adding RT8168_GET_MAC_FROM_VPD support..."
          sed -i '/select RT8168_SUPPORT_LEGACY_VPD_MAC/a\\tselect RT8168_GET_MAC_FROM_VPD' "$PUFF_KCONFIG"
          echo "✅ RT8168_GET_MAC_FROM_VPD support added"
        else
          echo "✅ RT8168_GET_MAC_FROM_VPD already present"
        fi
        
        # 检查并添加 RT8168_PUT_MAC_TO_ERI 支持
        if ! grep -q "select RT8168_PUT_MAC_TO_ERI" "$PUFF_KCONFIG"; then
          echo "📝 Adding RT8168_PUT_MAC_TO_ERI support..."
          sed -i '/select RT8168_GET_MAC_FROM_VPD/a\\tselect RT8168_PUT_MAC_TO_ERI' "$PUFF_KCONFIG"
          echo "✅ RT8168_PUT_MAC_TO_ERI support added"
        else
          echo "✅ RT8168_PUT_MAC_TO_ERI already present"
        fi
        
        echo "✅ Step 1 completed: RTL8168 dependencies fixed"
    
    - name: "Step 2: Configure Kaisa UEFI settings"
      run: |
        echo "🔧 Step 2: Configuring Kaisa UEFI settings..."
        echo "📝 Adding EDK2 network and RTL8168 configurations to config.kaisa.uefi"
        
        cd coreboot
        CONFIG_FILE="configs/cml/config.kaisa.uefi"
        
        echo "📝 Adding EDK2 network and RTL8168 configurations..."
        echo "" >> "$CONFIG_FILE"
        echo "# EDK2 Network PXE Support" >> "$CONFIG_FILE"
        echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> "$CONFIG_FILE"
        echo "CONFIG_EDK2_LOAD_OPTION_ROMS=y" >> "$CONFIG_FILE"
        echo "" >> "$CONFIG_FILE"
        echo "# EDK2 Boot Manager Settings" >> "$CONFIG_FILE"
        echo "CONFIG_EDK2_BOOT_TIMEOUT=10" >> "$CONFIG_FILE"
        echo "CONFIG_EDK2_BOOT_MANAGER_ESCAPE=y" >> "$CONFIG_FILE"
        echo "" >> "$CONFIG_FILE"
        echo "# RTL8168 MAC Address ERI Programming" >> "$CONFIG_FILE"
        echo "CONFIG_RT8168_PUT_MAC_TO_ERI=y" >> "$CONFIG_FILE"
        
        echo "✅ Step 2 completed: Kaisa UEFI settings configured"
    
    - name: "Step 3: Configure EDK2 custom build parameters"
      run: |
        echo "🔧 Step 3: Configuring EDK2 custom build parameters..."
        echo "📝 Adding optimized EDK2 network configuration for PXE boot"
        
        CONFIG_FILE="coreboot/configs/cml/config.kaisa.uefi"
        
        # 检查配置文件是否存在
        if [ -f "$CONFIG_FILE" ]; then
          echo "✅ Kaisa UEFI config found"
          
          # 检查是否已经存在 EDK2 自定义构建参数
          if grep -q "CONFIG_EDK2_CUSTOM_BUILD_PARAMS" "$CONFIG_FILE"; then
            echo "📝 Updating existing CONFIG_EDK2_CUSTOM_BUILD_PARAMS..."
            # 删除旧的配置行
            sed -i '/CONFIG_EDK2_CUSTOM_BUILD_PARAMS/d' "$CONFIG_FILE"
          else
            echo "📝 Adding new CONFIG_EDK2_CUSTOM_BUILD_PARAMS..."
          fi
          
          # 添加优化的 EDK2 自定义构建参数
          echo "" >> "$CONFIG_FILE"
          echo "# EDK2 custom build parameters for PXE network boot" >> "$CONFIG_FILE"
          echo 'CONFIG_EDK2_CUSTOM_BUILD_PARAMS="-D NETWORK_DRIVER_ENABLE=TRUE -D NETWORK_ENABLE=TRUE -D NETWORK_IP4_ENABLE=TRUE -D NETWORK_IP6_ENABLE=FALSE -D NETWORK_PXE_BOOT_ENABLE=TRUE -D NETWORK_HTTP_BOOT_ENABLE=FALSE -D NETWORK_HTTP_ENABLE=FALSE -D NETWORK_ALLOW_HTTP_CONNECTIONS=FALSE -D NETWORK_SNP_ENABLE=TRUE -D NETWORK_VLAN_ENABLE=FALSE -D NETWORK_RTEK_PCI=TRUE -D NETWORK_TLS_ENABLE=FALSE -D NETWORK_ISCSI_ENABLE=FALSE -D NETWORK_RTEK_USB=FALSE -D NETWORK_ASIX_USB3=FALSE -D NETWORK_ASIX_USB2=FALSE"' >> "$CONFIG_FILE"
          
          echo "✅ EDK2 custom build parameters configured"
        else
          echo "❌ Kaisa UEFI config not found"
          exit 1
        fi
        
        echo "✅ EDK2 custom build parameters configuration completed"
    
    - name: "Step 4: Apply RTL8168 driver fixes"
      run: |
        echo "🔧 Step 4: Applying RTL8168 driver fixes..."
        echo "📝 Overwriting r8168.c with fixed version..."
        
        cd coreboot
        R8168_DRIVER="src/drivers/net/r8168.c"
        FIXED_DRIVER="../fixed-files/r8168.c"
        
        # 检查修复后的文件是否存在
        if [ -f "$FIXED_DRIVER" ]; then
          echo "✅ Fixed RTL8168 driver found: $FIXED_DRIVER"
          
          # 覆盖原始文件
          echo "📝 Overwriting r8168.c with fixed version..."
          cp "$FIXED_DRIVER" "$R8168_DRIVER"
          echo "✅ RTL8168 driver fixes applied"
        else
          echo "❌ Fixed RTL8168 driver not found: $FIXED_DRIVER"
          echo "⚠️  Skipping driver fixes (using original version)"
        fi
        
        echo "✅ Step 4 completed: RTL8168 driver fixes applied"
    
    - name: Simulate build configuration
      run: |
        echo "🔧 Simulating build configuration process..."
        echo "📝 This step simulates the build-uefi.sh configuration process"
        
        cd coreboot
        
        # 复制配置文件到根目录（参考 build-uefi.sh 第31行）
        cfg_file="configs/cml/config.kaisa.uefi"
        echo "📋 Copying $cfg_file to .config"
        cp "$cfg_file" .config
        
        # 执行 make clean 和 make olddefconfig（参考 build-uefi.sh 第33-34行）
        echo "🧹 Running make clean..."
        make clean
        
        echo "⚙️ Running make olddefconfig..."
        make olddefconfig
        
        echo "✅ Build configuration simulation completed"
    
    - name: "Verify Step 1: RTL8168 dependencies"
      run: |
        echo "🔍 Verifying Step 1: RTL8168 dependencies in puff/Kconfig..."
        cd coreboot
        
        PUFF_KCONFIG="src/mainboard/google/puff/Kconfig"
        
        # 验证 REALTEK_8168_RESET 依赖
        if grep -q "select REALTEK_8168_RESET" "$PUFF_KCONFIG"; then
          echo "✅ REALTEK_8168_RESET dependency found in puff/Kconfig"
        else
          echo "❌ REALTEK_8168_RESET dependency not found in puff/Kconfig"
          exit 1
        fi
        
        # 验证 RT8168_SUPPORT_LEGACY_VPD_MAC 支持
        if grep -q "select RT8168_SUPPORT_LEGACY_VPD_MAC" "$PUFF_KCONFIG"; then
          echo "✅ RT8168_SUPPORT_LEGACY_VPD_MAC support found in puff/Kconfig"
        else
          echo "❌ RT8168_SUPPORT_LEGACY_VPD_MAC support not found in puff/Kconfig"
          exit 1
        fi
        
        # 验证 RT8168_GET_MAC_FROM_VPD 支持
        if grep -q "select RT8168_GET_MAC_FROM_VPD" "$PUFF_KCONFIG"; then
          echo "✅ RT8168_GET_MAC_FROM_VPD support found in puff/Kconfig"
        else
          echo "❌ RT8168_GET_MAC_FROM_VPD support not found in puff/Kconfig"
          exit 1
        fi
        
        # 验证 RT8168_PUT_MAC_TO_ERI 支持
        if grep -q "select RT8168_PUT_MAC_TO_ERI" "$PUFF_KCONFIG"; then
          echo "✅ RT8168_PUT_MAC_TO_ERI support found in puff/Kconfig"
        else
          echo "❌ RT8168_PUT_MAC_TO_ERI support not found in puff/Kconfig"
          exit 1
        fi
        
        echo "✅ Step 1 verification completed: RTL8168 dependencies verified"
    
    - name: "Verify Step 2: Kaisa UEFI settings"
      run: |
        echo "🔍 Verifying Step 2: Kaisa UEFI settings in config.kaisa.uefi..."
        cd coreboot
        
        CONFIG_FILE="configs/cml/config.kaisa.uefi"
        
        # 验证 PXE 支持配置
        if grep -q "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" "$CONFIG_FILE"; then
          echo "✅ CONFIG_EDK2_NETWORK_PXE_SUPPORT=y found in config.kaisa.uefi"
        else
          echo "❌ CONFIG_EDK2_NETWORK_PXE_SUPPORT=y not found in config.kaisa.uefi"
          exit 1
        fi
        
        # 验证 ROM 加载支持配置
        if grep -q "CONFIG_EDK2_LOAD_OPTION_ROMS=y" "$CONFIG_FILE"; then
          echo "✅ CONFIG_EDK2_LOAD_OPTION_ROMS=y found in config.kaisa.uefi"
        else
          echo "❌ CONFIG_EDK2_LOAD_OPTION_ROMS=y not found in config.kaisa.uefi"
          exit 1
        fi
        
        # 验证 EDK2 启动超时配置
        if grep -q "CONFIG_EDK2_BOOT_TIMEOUT=10" "$CONFIG_FILE"; then
          echo "✅ CONFIG_EDK2_BOOT_TIMEOUT=10 found in config.kaisa.uefi"
        else
          echo "❌ CONFIG_EDK2_BOOT_TIMEOUT=10 not found in config.kaisa.uefi"
          exit 1
        fi
        
        # 验证 EDK2 启动管理器配置
        if grep -q "CONFIG_EDK2_BOOT_MANAGER_ESCAPE=y" "$CONFIG_FILE"; then
          echo "✅ CONFIG_EDK2_BOOT_MANAGER_ESCAPE=y found in config.kaisa.uefi"
        else
          echo "❌ CONFIG_EDK2_BOOT_MANAGER_ESCAPE=y not found in config.kaisa.uefi"
          exit 1
        fi
        
        # 验证 RTL8168 ERI 编程配置
        if grep -q "CONFIG_RT8168_PUT_MAC_TO_ERI=y" "$CONFIG_FILE"; then
          echo "✅ CONFIG_RT8168_PUT_MAC_TO_ERI=y found in config.kaisa.uefi"
        else
          echo "❌ CONFIG_RT8168_PUT_MAC_TO_ERI=y not found in config.kaisa.uefi"
          exit 1
        fi
        
        echo "✅ Step 2 verification completed: Kaisa UEFI settings verified"
    
    - name: "Verify Step 3: EDK2 custom build parameters"
      run: |
        echo "🔍 Verifying Step 3: EDK2 custom build parameters..."
        cd coreboot
        
        CONFIG_FILE="configs/cml/config.kaisa.uefi"
        
        # 验证 EDK2 自定义构建参数
        if grep -q "CONFIG_EDK2_CUSTOM_BUILD_PARAMS" "$CONFIG_FILE"; then
          echo "✅ CONFIG_EDK2_CUSTOM_BUILD_PARAMS found in config.kaisa.uefi"
          echo "📋 EDK2 custom build parameters:"
          grep "CONFIG_EDK2_CUSTOM_BUILD_PARAMS" "$CONFIG_FILE"
          
          # 验证关键 EDK2 参数
          echo "🔍 Verifying key EDK2 parameters:"
          
          # 检查网络驱动启用
          if grep -q "NETWORK_DRIVER_ENABLE=TRUE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_DRIVER_ENABLE=TRUE found"
          else
            echo "❌ NETWORK_DRIVER_ENABLE=TRUE not found"
          fi
          
          # 检查 PXE 启动启用
          if grep -q "NETWORK_PXE_BOOT_ENABLE=TRUE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_PXE_BOOT_ENABLE=TRUE found"
          else
            echo "❌ NETWORK_PXE_BOOT_ENABLE=TRUE not found"
          fi
          
          # 检查 SNP 协议启用
          if grep -q "NETWORK_SNP_ENABLE=TRUE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_SNP_ENABLE=TRUE found"
          else
            echo "❌ NETWORK_SNP_ENABLE=TRUE not found"
          fi
          
          # 检查 RTL8168 支持
          if grep -q "NETWORK_RTEK_PCI=TRUE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_RTEK_PCI=TRUE found (RTL8168 support)"
          else
            echo "❌ NETWORK_RTEK_PCI=TRUE not found"
          fi
          
          # 检查 TLS 禁用
          if grep -q "NETWORK_TLS_ENABLE=FALSE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_TLS_ENABLE=FALSE found (TLS disabled to avoid build issues)"
          else
            echo "❌ NETWORK_TLS_ENABLE=FALSE not found"
          fi
          
          # 检查 VLAN 禁用
          if grep -q "NETWORK_VLAN_ENABLE=FALSE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_VLAN_ENABLE=FALSE found (VLAN disabled for terminal devices)"
          else
            echo "❌ NETWORK_VLAN_ENABLE=FALSE not found"
          fi
          
          # 检查 HTTP 功能禁用
          if grep -q "NETWORK_HTTP_BOOT_ENABLE=FALSE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_HTTP_BOOT_ENABLE=FALSE found (HTTP boot disabled)"
          else
            echo "❌ NETWORK_HTTP_BOOT_ENABLE=FALSE not found"
          fi
          
          # 检查 IPv6 禁用
          if grep -q "NETWORK_IP6_ENABLE=FALSE" "$CONFIG_FILE"; then
            echo "✅ NETWORK_IP6_ENABLE=FALSE found (IPv6 disabled)"
          else
            echo "❌ NETWORK_IP6_ENABLE=FALSE not found"
          fi
        else
          echo "❌ CONFIG_EDK2_CUSTOM_BUILD_PARAMS not found in config.kaisa.uefi"
          exit 1
        fi
        
        echo "✅ Step 3 verification completed: EDK2 custom build parameters verified"
    
    - name: "Verify Step 4: RTL8168 driver file overwrite"
      run: |
        echo "🔍 Verifying Step 4: RTL8168 driver file overwrite..."
        echo "📝 Verifying that fixed RTL8168 driver file was correctly copied:"
        cd coreboot
        
        R8168_DRIVER="src/drivers/net/r8168.c"
        
        # 验证 RTL8168 驱动文件存在
        if [ -f "$R8168_DRIVER" ]; then
          echo "✅ RTL8168 driver found: $R8168_DRIVER"
          
          # 验证关键修复点
          echo "📝 Verifying key fixes:"
          
          # 1. VPD 头文件包含
          if grep -q "#include <drivers/vpd/vpd.h>" "$R8168_DRIVER"; then
            echo "✅ VPD header include found"
          else
            echo "❌ VPD header include not found"
            exit 1
          fi
          
          # 2. vpd_find 函数调用
          if grep -q "vpd_find" "$R8168_DRIVER"; then
            echo "✅ vpd_find() function call found"
          else
            echo "❌ vpd_find() function call not found"
            exit 1
          fi
          
          # 3. get_mac_address 函数修复
          if grep -q "Check if both hex digits are valid" "$R8168_DRIVER"; then
            echo "✅ Hex digit validation code found"
          else
            echo "❌ Hex digit validation code not found"
            exit 1
          fi
          
          # 4. RTL8111H ERI 支持
          if grep -q "case 12:" "$R8168_DRIVER" && grep -q "case 13:" "$R8168_DRIVER" && grep -q "case 14:" "$R8168_DRIVER" && grep -q "case 15:" "$R8168_DRIVER"; then
            echo "✅ RTL8111H revision 12-15 cases found"
          else
            echo "❌ RTL8111H revision 12-15 cases not found"
            exit 1
          fi
          
          # 5. ERI 编程代码
          if grep -qE "RTL8111H revision.*ERI programming" "$R8168_DRIVER"; then
            echo "✅ RTL8111H ERI programming code found"
          else
            echo "❌ RTL8111H ERI programming code not found"
            exit 1
          fi
          
          # 6. 验证 const void * 类型
          if grep -qE "const void \*vpd_value" "$R8168_DRIVER"; then
            echo "✅ Correct vpd_value type (const void *) found"
          else
            echo "❌ Correct vpd_value type not found"
            exit 1
          fi
          
          echo "✅ Step 4 verification completed: All RTL8168 driver fixes verified"
        else
          echo "❌ RTL8168 driver not found: $R8168_DRIVER"
          exit 1
        fi
    
    - name: Verify final build results
      run: |
        echo "🔍 Verifying final build results..."
        echo "📝 Checking RTL8168 driver source code modifications..."

        R8168_DRIVER="src/drivers/net/r8168.c"
        
        cd coreboot
          
        # 显示完整的 r8168.c 文件内容用于验证
        echo "📋 Complete RTL8168 driver source code:"
        echo "=========================================="
        cat "$R8168_DRIVER"
        echo "=========================================="          
        
        echo "✅ Final build results verification completed"
      
    - name: Build Kaisa ROM with Docker
      run: |
          echo "🚀 Building Kaisa ROM: ${{ github.event.inputs.release_name || 'kaisa' }}"
          echo "🐳 Using coreboot/coreboot-sdk Docker image..."
          
          cd coreboot
          
          # Create output directory
          mkdir -p ../roms
          
          # Build using Docker
          echo "🔧 Starting Docker build..."
          docker run --rm --user root -v "$(pwd)":/home/coreboot/coreboot -v "$(pwd)/../roms":/home/coreboot/roms -w /home/coreboot/coreboot coreboot/coreboot-sdk:latest bash -c "
            echo '🔧 Building Kaisa ROM...'
            git config --global --add safe.directory /home/coreboot/coreboot
            ./build-uefi.sh kaisa
          "
          
          # Check generated files
          echo "📋 Checking generated files in roms directory:"
          ls -la roms/ || echo "roms directory not found"
          echo "📋 Looking for .sha1 files:"
          find roms/ -name "*.sha1" -type f || echo "No .sha1 files found"
          
          echo "✅ ROM build completed"
    
    - name: Check ROM files
      run: |
        echo "📋 Generated ROM files:"
        echo "ROM files:"
        ls -la roms/*.rom || echo "No ROM files found"
        echo "SHA1 files:"
        ls -la roms/*.sha1 || echo "No SHA1 files found"
        echo "All files in roms directory:"
        ls -la roms/
    
    - name: Upload ROM Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kaisa-rom
        path: |
          roms/*.rom
          roms/*.sha1
        compression-level: 0
    
    - name: Create Release
      if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.release_name }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: kaisa-${{ github.run_number }}
        name: "${{ github.event.inputs.release_name || 'Coreboot Kaisa ROM' }} #${{ github.run_number }}"
        body: |
          # 🎯 Kaisa ROM 构建成功
          
          ## 🔧 构建信息
          - **主板型号**: Google Kaisa (Puff)
          - **构建时间**: ${{ github.event.repository.updated_at }}
          - **构建编号**: #${{ github.run_number }}
          
          ## 📦 包含文件
          - `coreboot.rom` - 主固件文件
          - `coreboot.rom.sha1` - SHA1 校验文件
          
          ## 🚀 使用方法
          1. 下载 `coreboot.rom` 文件
          2. 使用刷写工具刷入主板
          3. 重启后即可使用
          
          ## ⚠️ 注意事项
          - 刷写前请备份原始固件
          - 确保主板型号为 Google Kaisa
          - 刷写失败可能导致主板无法启动
        files: |
          roms/*.rom
          roms/*.sha1
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
