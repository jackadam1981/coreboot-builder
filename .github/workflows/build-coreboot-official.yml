name: Build Coreboot Official Firmware

on:
  # 支持手动触发
  workflow_dispatch:
    inputs:
      release:
        description: '创建 Release 发布 / Create Release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出构建仓库 / Checkout Builder Repository
      uses: actions/checkout@v4

    - name: 克隆 Coreboot 官方源码 / Clone Official Coreboot Source
      run: |
        git clone https://github.com/coreboot/coreboot.git coreboot
        cd coreboot
        git submodule update --init --checkout --recursive

    - name: 替换自定义 Logo / Replace Custom Logo
      run: |
        if [ -f "coreboot_logo.bmp" ]; then
          cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
          echo "✅ 已替换为自定义 Logo"
        else
          echo "ℹ️  使用默认 Logo"
        fi

    - name: 创建 Kaisa 配置 / Create Kaisa Configuration
      run: |
        echo "📝 创建 kaisa 设备配置"
        cd coreboot
        
        # 创建配置目录
        mkdir -p configs/cml
        
        # Kaisa 配置 - 官方 coreboot + MrChromebox EDK2 + iPXE
        cat > configs/cml/config.kaisa.uefi << 'EOF'
        # 基础板型配置
        CONFIG_VENDOR_GOOGLE=y
        CONFIG_BOARD_GOOGLE_KAISA=y
        
        # Payload 配置 - 使用 MrChromebox 的 EDK2
        CONFIG_PAYLOAD_EDK2=y
        CONFIG_EDK2_UEFIPAYLOAD=y
        CONFIG_EDK2_REPO_MRCHROMEBOX=y
        
        # PCI Option ROM 支持（关键：让 EDK2 加载并执行网卡 Option ROM）
        CONFIG_EDK2_LOAD_OPTION_ROMS=y
        CONFIG_EDK2_PRIORITIZE_INTERNAL=y
        
        # iPXE Option ROM（提供网络功能）
        CONFIG_PXE=y
        CONFIG_BUILD_IPXE=y
        CONFIG_PXE_ROM_ID="10ec,8168"
        
        # iPXE 高级功能
        CONFIG_IPXE_STABLE=y
        CONFIG_IPXE_HAS_HTTPS=y
        CONFIG_IPXE_TRUST_CMD=y
        EOF
        
        echo "✅ 配置文件已创建"
        cat configs/cml/config.kaisa.uefi

    - name: 验证设备树配置 / Verify Device Tree Configuration
      run: |
        echo "📋 验证现有 RTL8111H 网卡配置："
        cd coreboot
        grep -A 15 -B 2 "device ref pcie_rp7" src/mainboard/google/puff/variants/kaisa/overridetree.cb

    - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
      run: docker pull coreboot/coreboot-sdk:latest

    - name: 编译固件 / Build Firmware
      run: |
        echo "🔨 开始编译 coreboot 官方版本固件"
        
        # 创建输出目录
        mkdir -p roms
        
        # 设置设备名称
        DEVICE="kaisa"
        
        echo "📝 检查配置文件..."
        cat coreboot/configs/cml/config.kaisa.uefi
        
        echo ""
        echo "🐳 使用 coreboot SDK 容器编译..."
        
        # 使用 coreboot SDK 容器编译
        docker run --rm --user root \
          -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
          -v ${{ github.workspace }}/roms:/home/coreboot/roms \
          -w /home/coreboot/coreboot \
          coreboot/coreboot-sdk:latest \
          bash -c "set -e && \
                   git config --global --add safe.directory /home/coreboot/coreboot && \
                   echo '📋 应用配置文件...' && \
                   cp configs/cml/config.kaisa.uefi .config && \
                   echo '📋 运行 olddefconfig...' && \
                   make olddefconfig && \
                   echo '📋 显示最终配置中的关键选项...' && \
                   grep -E 'CONFIG_(VENDOR|BOARD|PAYLOAD|EDK2|PXE|VBOOT|CHROMEOS)' .config || true && \
                   echo '🔨 开始编译 coreboot...' && \
                   make -j\$(nproc) 2>&1 | tee build.log || (echo '❌ 编译失败，退出码:' \$?; exit 1) && \
                   echo '✅ 编译完成' && \
                   echo '📁 检查构建目录...' && \
                   ls -la build/ && \
                   echo '📁 查找 ROM 文件...' && \
                   find build/ -name '*.rom' -o -name 'coreboot.rom' || echo '未找到 ROM 文件'"
        
        # 检查编译结果
        echo ""
        echo "🔍 检查编译结果..."
        
        if [ -f "coreboot/build/coreboot.rom" ]; then
          cp coreboot/build/coreboot.rom "coreboot_official-${DEVICE}-$(date +"%Y%m%d").rom"
          echo "✅ 固件编译成功: coreboot_official-${DEVICE}-$(date +"%Y%m%d").rom"
          echo "📊 固件大小: $(ls -lh coreboot_official-${DEVICE}-$(date +"%Y%m%d").rom | awk '{print $5}')"
          
          # 使用 cbfstool 查看固件内容
          echo "📦 固件内容："
          coreboot/build/cbfstool coreboot_official-${DEVICE}-$(date +"%Y%m%d").rom print || true
        else
          echo "❌ 固件 ROM 文件不存在"
          echo "📁 构建目录内容："
          ls -laR coreboot/build/ 2>/dev/null || echo "构建目录不存在"
          
          echo ""
          echo "📋 编译日志最后 100 行："
          if [ -f "coreboot/build.log" ]; then
            tail -100 coreboot/build.log
          else
            echo "编译日志文件不存在"
          fi
          
          echo ""
          echo "📋 查找所有错误信息："
          if [ -f "coreboot/build.log" ]; then
            grep -i "error\|failed\|fatal" coreboot/build.log | tail -50 || echo "未找到错误关键词"
          fi
          
          exit 1
        fi

    - name: 上传固件 / Upload Firmware
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-official-kaisa-firmware
        path: coreboot/coreboot_official-kaisa-*.rom
        retention-days: 30

    - name: 上传编译日志 / Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-official-build-logs
        path: |
          coreboot/build.log
          coreboot/.config
          coreboot/configs/cml/config.kaisa.uefi
        retention-days: 7

    - name: 准备发布信息 / Prepare Release Info
      if: github.event.inputs.release == 'true'
      id: release_info
      run: |
        echo "date=$(date +"%Y%m%d")" >> $GITHUB_OUTPUT
        echo "date_full=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT
    
    - name: 创建发布 / Create Release
      if: github.event.inputs.release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: coreboot-official-kaisa-${{ steps.release_info.outputs.date }}
        name: Coreboot Official Kaisa ${{ steps.release_info.outputs.date_full }}
        body: |
          ## Coreboot 官方版本固件 - UEFI + 完整网络支持
          
          ### 设备信息
          - **设备**: kaisa (Google Chromebook)
          - **版本**: Coreboot 官方版本
          - **Payload**: MrChromebox EDK2 (UEFI)
          - **编译日期**: ${{ steps.release_info.outputs.date_full }}
          
          ### 特性
          - ✅ 完整的 UEFI 环境（MrChromebox EDK2）
          - ✅ iPXE Option ROM 网络启动
          - ✅ RTL8168 网卡支持 (10ec:8168)
          - ✅ EDK2 自动加载 Option ROM
          - ✅ HTTPS 和数字签名支持
          
          ### 技术方案
          - **coreboot 源码**: 官方 coreboot（最新功能）
          - **EDK2 Payload**: MrChromebox fork（成熟稳定）
          - **网络实现**: iPXE Option ROM（兼容性好）
          - **组合优势**: 官方 coreboot + 成熟 EDK2 + 可靠 iPXE
          
          ### 网络支持
          - PXE 启动
          - iPXE 脚本支持
          - HTTPS 协议
          - 数字签名验证
          
          ### 使用方法
          1. 下载对应的 ROM 文件
          2. 使用 flashrom 刷写固件
          3. 重启设备进行测试
          4. 可以安装 Windows 系统
        files: coreboot/coreboot_official-kaisa-*.rom
        draft: false
        prerelease: false