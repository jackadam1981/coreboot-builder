name: 方案6 - 多路径 iPXE 集成 / Strategy 6 - Multi-path iPXE Integration

on:
  workflow_dispatch:
    inputs:
      release:
        description: "创建 Release 发布 / Create Release"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 显示方案信息 / Display Strategy Info
        run: |
          echo "=========================================="
          echo "🎯 方案6：多路径 iPXE 集成"
          echo "=========================================="
          echo ""
          echo "📝 方案说明："
          echo "  - 尝试多个 CBFS 路径集成 iPXE"
          echo "  - 测试不同压缩方式的影响"
          echo "  - 找到最可靠的集成方法"
          echo ""
          echo "🎯 预期结果："
          echo "  ✅ 找到最可靠的 iPXE 集成路径"
          echo "  ✅ 确定最佳压缩策略"
          echo "  ✅ 提高 iPXE 在启动菜单中的可见性"
          echo ""
          echo "📊 技术实现："
          echo "  1. 配置 EDK2 网络支持"
          echo "  2. 下载预编译 iPXE EFI"
          echo "  3. 编译 MrChromebox 固件"
          echo "  4. 尝试多种集成路径和压缩方式"
          echo "  5. 对比集成成功率"
          echo "=========================================="

      - name: 检出构建仓库 / Checkout Builder Repository
        uses: actions/checkout@v4

      - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
        run: docker pull coreboot/coreboot-sdk:latest

      - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
        run: |
          echo "📥 克隆 MrChromebox coreboot"
          git clone https://github.com/MrChromebox/coreboot.git coreboot
          cd coreboot
          git submodule update --init --checkout --recursive

      - name: 配置 EDK2 网络支持 / Configure EDK2 Network Support
        run: |
          echo "📝 配置 MrChromebox kaisa 网络支持"
          cd coreboot
          
          # 检查配置文件是否存在
          if [ -f "configs/cml/config.kaisa.uefi" ]; then
            echo "✅ 找到现有配置文件"
            
            # 检查是否已包含网络支持配置
            if grep -q "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" configs/cml/config.kaisa.uefi; then
              echo "✅ EDK2 网络支持配置已存在"
            else
              echo "📝 添加 EDK2 网络支持配置"
              echo "" >> configs/cml/config.kaisa.uefi
              echo "# EDK2 网络支持配置（方案6：多路径 iPXE 集成）" >> configs/cml/config.kaisa.uefi
              echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> configs/cml/config.kaisa.uefi
              echo "CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y" >> configs/cml/config.kaisa.uefi
              echo "CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y" >> configs/cml/config.kaisa.uefi
              echo "✅ EDK2 网络支持配置已添加"
            fi
          else
            echo "❌ 配置文件不存在"
            exit 1
          fi

      - name: 下载预编译 iPXE EFI / Download Pre-compiled iPXE EFI
        run: |
          echo "📥 下载预编译 iPXE EFI（用于多路径集成测试）"
          
          # 创建 iPXE 目录
          mkdir -p ipxe_files
          cd ipxe_files
          
          # 下载官方预编译 iPXE EFI 文件
          echo "📥 从 https://boot.ipxe.org/ 下载 ipxe.efi"
          wget -O ipxe-efi-x86_64.efi "https://boot.ipxe.org/ipxe.efi" || {
            echo "❌ iPXE 下载失败，工作流终止"
            exit 1
          }
          
          # 复制到工作目录
          cp ipxe-efi-x86_64.efi ../ipxe_x64.efi
          echo "✅ iPXE EFI 下载成功"
          ls -lh ../ipxe_x64.efi
          echo "📊 iPXE 文件信息："
          file ../ipxe_x64.efi
          
          cd ..

      - name: 替换自定义 Logo / Replace Custom Logo
        run: |
          if [ -f "coreboot_logo.bmp" ]; then
            cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
            echo "✅ 已替换为自定义 Logo"
          else
            echo "ℹ️  使用默认 Logo"
          fi

      - name: 编译 MrChromebox 固件 / Build MrChromebox Firmware
        run: |
          mkdir -p roms
          echo "📦 编译 MrChromebox 固件（用于多路径集成测试）"
          
          # 使用 MrChromebox 标准编译流程
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     echo '🔧 使用 MrChromebox build-uefi.sh 编译 kaisa...' && \
                     ./build-uefi.sh kaisa && \
                     chmod 644 /home/coreboot/roms/*.rom && \
                     echo '✅ MrChromebox 固件编译完成'"

      - name: 多路径 iPXE 集成测试 / Multi-path iPXE Integration Test
        run: |
          echo "🔧 方案6核心：多路径 iPXE 集成测试"
          
          # 检查 iPXE 文件是否存在
          if [ ! -f "ipxe_x64.efi" ]; then
            echo "❌ iPXE 文件不存在，无法进行集成测试"
            exit 1
          fi
          
          echo "📊 iPXE 文件信息："
          ls -lh ipxe_x64.efi
          
          # 找到生成的 ROM 文件
          ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            exit 1
          fi
          
          echo "📋 ROM 文件: $ROM_FILE"
          
          # 创建测试结果目录
          mkdir -p integration_tests
          
          # 使用优化的集成策略：单一推荐路径，按压缩优先级测试
          declare -a PATHS=("efi/ipxe/ipxe.efi")  # coreboot 推荐路径
          declare -a COMPRESSIONS=("none" "lz4" "lzma")  # 按优先级排序：无压缩 > LZ4 > LZMA
          
          # 测试结果记录
          echo "路径,压缩方式,集成结果,文件大小,CBFS条目" > integration_tests/test_results.csv
          
          echo ""
          echo "🧪 开始优化的 iPXE 集成测试..."
          echo "📋 测试策略：单一推荐路径 efi/ipxe/ipxe.efi"
          echo "📋 压缩优先级：无压缩 > LZ4 > LZMA"
          
          # 测试每个路径和压缩方式的组合
          for path in "${PATHS[@]}"; do
            for compression in "${COMPRESSIONS[@]}"; do
              echo ""
              echo "🔧 测试路径: $path, 压缩: $compression"
              
              # 复制原始 ROM 文件
              TEST_ROM="${ROM_FILE%.*}_${path//\//_}_${compression}.rom"
              cp "$ROM_FILE" "$TEST_ROM"
              
              # 尝试集成（支持三种压缩方式）
              if [ "$compression" = "lzma" ]; then
                COMPRESS_FLAG="-c lzma"
              elif [ "$compression" = "lz4" ]; then
                COMPRESS_FLAG="-c lz4"
              else
                COMPRESS_FLAG=""  # 无压缩
              fi
              
              # 执行集成命令
              if coreboot/build/cbfstool "$TEST_ROM" add -f ipxe_x64.efi -n "$path" -t raw $COMPRESS_FLAG 2>/dev/null; then
                echo "✅ 集成成功"
                RESULT="成功"
                
                # 检查 CBFS 条目
                CBFS_ENTRY=$(coreboot/build/cbfstool "$TEST_ROM" print | grep "$path" | head -1)
                
                # 记录到 CSV
                echo "$path,$compression,成功,$(ls -lh "$TEST_ROM" | awk '{print $5}'),\"$CBFS_ENTRY\"" >> integration_tests/test_results.csv
                
                # 保存成功的 ROM 文件
                cp "$TEST_ROM" "roms/"
              else
                echo "❌ 集成失败"
                RESULT="失败"
                
                # 记录到 CSV
                echo "$path,$compression,失败,N/A,N/A" >> integration_tests/test_results.csv
                
                # 删除失败的 ROM 文件
                rm -f "$TEST_ROM"
              fi
            done
          done
          
          echo ""
          echo "📊 集成测试结果汇总："
          cat integration_tests/test_results.csv
          
          # 统计成功数量
          SUCCESS_COUNT=$(grep -c "成功" integration_tests/test_results.csv)
          TOTAL_TESTS=$((${#PATHS[@]} * ${#COMPRESSIONS[@]}))
          
          echo ""
          echo "📈 测试统计："
          echo "  总测试数: $TOTAL_TESTS"
          echo "  成功数: $SUCCESS_COUNT"
          echo "  成功率: $(( SUCCESS_COUNT * 100 / TOTAL_TESTS ))%"

      - name: 分析最佳集成方式 / Analyze Best Integration Method
        run: |
          echo "🔍 分析最佳集成方式"
          
          # 检查成功的集成
          SUCCESSFUL_TESTS=$(grep "成功" integration_tests/test_results.csv)
          
          if [ -n "$SUCCESSFUL_TESTS" ]; then
            echo "✅ 找到成功的集成方式："
            echo "$SUCCESSFUL_TESTS"
            
            # 推荐最佳方式
            echo ""
            echo "🎯 推荐的最佳集成方式："
            
            # 优先推荐标准 UEFI 路径
            if echo "$SUCCESSFUL_TESTS" | grep -q "efi/boot/bootx64.efi"; then
              BEST_PATH="efi/boot/bootx64.efi"
              echo "  🥇 首选：$BEST_PATH（标准 UEFI 启动路径）"
            elif echo "$SUCCESSFUL_TESTS" | grep -q "efi/boot/ipxe.efi"; then
              BEST_PATH="efi/boot/ipxe.efi"
              echo "  🥈 备选：$BEST_PATH（自定义 iPXE 路径）"
            elif echo "$SUCCESSFUL_TESTS" | grep -q "efi/ipxe/ipxe.efi"; then
              BEST_PATH="efi/ipxe/ipxe.efi"
              echo "  🥉 备选：$BEST_PATH（iPXE 专用路径）"
            else
              BEST_PATH=$(echo "$SUCCESSFUL_TESTS" | head -1 | cut -d',' -f1)
              echo "  🔧 可用：$BEST_PATH"
            fi
            
            # 推荐压缩方式
            if echo "$SUCCESSFUL_TESTS" | grep -q "$BEST_PATH.*lzma"; then
              echo "  📦 推荐压缩：LZMA（节省空间）"
            else
              echo "  📦 推荐压缩：无压缩（启动更快）"
            fi
            
          else
            echo "❌ 所有集成方式都失败"
            echo "  - 可能需要检查 CBFS 空间"
            echo "  - 或者 iPXE 文件过大"
            echo "  - 建议使用更小的 iPXE 版本"
          fi

      - name: 生成方案6测试报告 / Generate Strategy 6 Test Report
        run: |
          echo "📊 生成方案6测试报告"
          mkdir -p test-reports
          
          ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
          SUCCESS_COUNT=$(grep -c "成功" integration_tests/test_results.csv)
          TOTAL_TESTS=$(($(grep -c "," integration_tests/test_results.csv) - 1))
          
          cat > test-reports/strategy6-test-report.md << EOF
          # 方案6测试报告 - 多路径 iPXE 集成
          
          **测试时间**: $(date)
          **GitHub Actions Run**: ${{ github.run_number }}
          **MrChromebox 版本**: $(cd coreboot && git rev-parse HEAD)
          
          ## 方案说明
          
          - **方案名称**: 方案6 - 多路径 iPXE 集成
          - **技术路线**: 尝试多种 CBFS 路径和压缩方式
          - **适用场景**: 优化 iPXE 集成效果，找到最佳方案
          
          ## 测试结果
          
          ### 集成测试统计
          - 总测试数: $TOTAL_TESTS
          - 成功数: $SUCCESS_COUNT
          - 成功率: $(( SUCCESS_COUNT * 100 / TOTAL_TESTS ))%
          
          ### 详细测试结果
          
          \`\`\`csv
          $(cat integration_tests/test_results.csv)
          \`\`\`
          
          ### 最佳集成方式
          
          $(if [ $SUCCESS_COUNT -gt 0 ]; then
            echo "✅ **找到成功的集成方式**"
            echo ""
            echo "**推荐配置：**"
            BEST_TEST=$(grep "成功" integration_tests/test_results.csv | head -1)
            BEST_PATH=$(echo "$BEST_TEST" | cut -d',' -f1)
            BEST_COMPRESSION=$(echo "$BEST_TEST" | cut -d',' -f2)
            echo "- 路径: $BEST_PATH"
            echo "- 压缩: $BEST_COMPRESSION"
            echo "- 文件大小: $(echo "$BEST_TEST" | cut -d',' -f4)"
          else
            echo "❌ **所有集成方式都失败**"
            echo ""
            echo "**问题分析：**"
            echo "- 可能需要检查 CBFS 空间"
            echo "- 或者 iPXE 文件过大"
            echo "- 建议使用更小的 iPXE 版本"
          fi)
          
          ## 结论
          
          $(if [ $SUCCESS_COUNT -gt 0 ]; then
            echo "✅ **方案6测试成功**"
            echo ""
            echo "- 找到 $SUCCESS_COUNT 种可用的集成方式"
            echo "- 可以优化 iPXE 集成效果"
            echo "- 提供了多种备选方案"
          else
            echo "❌ **方案6测试失败**"
            echo ""
            echo "- 所有集成方式都失败"
            echo "- 需要进一步优化"
          fi)
          
          ## 下一步建议
          
          - 使用推荐的集成方式更新方案1
          - 在实际硬件上测试不同路径的启动效果
          - 对比不同压缩方式的性能差异
          EOF
          
          cat test-reports/strategy6-test-report.md

      - name: 上传固件 / Upload Firmware Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: strategy6-firmware-${{ github.run_number }}
          path: roms/*.rom
          retention-days: 30

      - name: 上传测试结果 / Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: strategy6-test-results-${{ github.run_number }}
          path: integration_tests/
          retention-days: 30

      - name: 上传测试报告 / Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: strategy6-test-report-${{ github.run_number }}
          path: test-reports/
          retention-days: 30

      - name: 创建 Release / Create Release
        if: ${{ inputs.release == true }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: strategy6-firmware-${{ github.run_number }}
          name: 方案6固件 - 多路径 iPXE 集成 / Strategy 6 - Multi-path iPXE Integration
          body: |
            ## 方案6：多路径 iPXE 集成
            
            **设备 / Device:** Acer Chromebox CXI4 (kaisa)
            **方案 / Strategy:** 方案6 - 多路径 iPXE 集成
            **构建日期 / Build Date:** ${{ github.run_number }}
            
            ### 方案说明
            
            - **技术路线**: 尝试多种 CBFS 路径和压缩方式
            - **网络支持**: EDK2 原生 + iPXE 增强
            - **集成方式**: 多路径测试，找到最佳方案
            
            ### 测试结果
            
            - 总测试数: $(grep -c "," integration_tests/test_results.csv || echo "0")
            - 成功数: $(grep -c "成功" integration_tests/test_results.csv || echo "0")
            - 成功率: $(( $(grep -c "成功" integration_tests/test_results.csv || echo "0") * 100 / $(grep -c "," integration_tests/test_results.csv || echo "1") ))%
            
            ### 文件清单
            
            - 固件文件：多个测试版本的 ROM 文件
            - 测试结果：`test_results.csv`
            - 测试报告：`strategy6-test-report.md`
            
          files: |
            roms/*.rom
            integration_tests/*.csv
            test-reports/*.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
