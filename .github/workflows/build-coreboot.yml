name: Build Coreboot Firmware

on:
  # 支持手动触发
  workflow_dispatch:
    inputs:
      release:
        description: '创建 Release 发布 / Create Release'
        required: false
        type: boolean
        default: false
      wds_server:
        description: 'WDS 服务器地址 / WDS Server IP (可选，如: 192.168.1.100)'
        required: false
        type: string
        default: ''
      wds_boot_file:
        description: 'WDS 启动文件 / WDS Boot File (可选，如: bootmgr.efi 或 bootx64.efi)'
        required: false
        type: string
        default: 'bootmgr.efi'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出构建仓库 / Checkout Builder Repository
      uses: actions/checkout@v4

    - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
      run: |
        echo "📥 克隆 MrChromebox coreboot（包含网络支持）"
        git clone https://github.com/MrChromebox/coreboot.git coreboot
        cd coreboot
        git submodule update --init --checkout --recursive

    - name: 替换自定义 Logo / Replace Custom Logo
      run: |
        if [ -f "coreboot_logo.bmp" ]; then
          cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
          echo "✅ 已替换为自定义 Logo"
        else
          echo "ℹ️  使用默认 Logo"
        fi

    - name: 配置网络支持 / Configure Network Support
      run: |
        echo "📝 添加网络栈配置到 kaisa 配置文件"
        cd coreboot
        
        # 显示原始配置
        echo "📋 原始配置："
        cat configs/cml/config.kaisa.uefi
        
        # 添加网络支持配置
        echo "" >> configs/cml/config.kaisa.uefi
        echo "# 网络支持配置" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_LOAD_OPTION_ROMS=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_PRIORITIZE_INTERNAL=y" >> configs/cml/config.kaisa.uefi
        
        echo ""
        echo "✅ 网络配置已添加"
        echo "📋 最终配置："
        cat configs/cml/config.kaisa.uefi

    # 设备树验证步骤已移除，简化构建流程

    - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
      run: docker pull coreboot/coreboot-sdk:latest

    - name: 下载预编译 iPXE EFI 应用 / Download Pre-compiled iPXE EFI
      run: |
        echo "📥 下载预编译 iPXE EFI 应用（用于编译时集成）"
        
        # 创建 iPXE 测试目录
        mkdir -p ipxe_test
        cd ipxe_test
        
        # 下载官方预编译 iPXE EFI 文件
        echo "🔧 下载 iPXE EFI 文件..."
        
        # 下载官方预编译 iPXE EFI 文件
        echo "📥 从 https://boot.ipxe.org/ 下载 ipxe.efi (1.0M)"
        wget -O ipxe-efi-x86_64.efi "https://boot.ipxe.org/ipxe.efi" || {
          echo "❌ 官方源失败，尝试轻量版本 snponly.efi (203K)"
          wget -O ipxe-efi-x86_64.efi "https://boot.ipxe.org/snponly.efi" || {
            echo "❌ 所有下载源都失败，跳过 iPXE 集成"
            cd ..
            exit 1
          }
        }
        
        # 如果下载成功，复制到工作目录
        if [ -f "ipxe-efi-x86_64.efi" ]; then
          cp ipxe-efi-x86_64.efi ../ipxe_x64.efi
          echo "✅ 预编译 iPXE EFI 下载成功"
          echo "📊 文件信息："
          ls -lh ipxe-efi-x86_64.efi
          file ipxe-efi-x86_64.efi
        fi
        
        cd ..
        
        # 验证 iPXE EFI 文件
        if [ -f "ipxe_x64.efi" ]; then
          echo "✅ iPXE EFI 文件已准备"
          ls -lh ipxe_x64.efi
          file ipxe_x64.efi
          echo "iPXE 文件前16字节（魔数检查）："
          hexdump -C ipxe_x64.efi | head -2
          
          echo ""
          echo "🔍 检查 iPXE 网络驱动支持（针对 RTL8111H/RTL8168）："
          # 检查 RTL8168 系列驱动（兼容 RTL8111H）
          strings ipxe_x64.efi | grep -i "rtl8168" && echo "✅ 包含 RTL8168 驱动（兼容 RTL8111H）" || echo "❌ 未找到 RTL8168 驱动"
          strings ipxe_x64.efi | grep -i "rtl816" && echo "✅ 包含 RTL816 系列驱动" || echo "❌ 未找到 RTL816 系列驱动"
          strings ipxe_x64.efi | grep -i "realtek" && echo "✅ 包含 Realtek 驱动支持" || echo "❌ 未找到 Realtek 驱动"
          
          echo ""
          echo "🔍 检查网络功能支持："
          strings ipxe_x64.efi | grep -i "dhcp" && echo "✅ 包含 DHCP 支持" || echo "❌ 未找到 DHCP 支持"
          strings ipxe_x64.efi | grep -i "pxe" && echo "✅ 包含 PXE 支持" || echo "❌ 未找到 PXE 支持"
          strings ipxe_x64.efi | grep -i "http" && echo "✅ 包含 HTTP 支持" || echo "❌ 未找到 HTTP 支持"
        else
          echo "❌ iPXE EFI 文件不存在"
        fi
        

    - name: 编译固件（编译时集成 iPXE）/ Build Firmware with iPXE
      run: |
        mkdir -p roms
        echo "📦 编译固件 with 编译时 iPXE 集成"
        
        # 检查 iPXE 文件是否存在
        if [ ! -f "ipxe_x64.efi" ]; then
          echo "⚠️  iPXE 文件不存在，编译不含 iPXE 的固件"
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     ./build-uefi.sh kaisa && \
                     chmod 644 /home/coreboot/roms/*.rom"
        else
          echo "✅ iPXE 文件存在，先编译基础固件，然后尝试运行时集成"
          
          # 先编译基础固件
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     ./build-uefi.sh kaisa && \
                     chmod 644 /home/coreboot/roms/*.rom"
          
          echo "🔧 尝试运行时集成 iPXE（使用 cbfstool）..."
          
          # 找到生成的 ROM 文件
          ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
          
          if [ -n "$ROM_FILE" ]; then
            echo "📋 找到 ROM 文件: $ROM_FILE"
            
            # 备份原始固件
            cp "$ROM_FILE" "roms/coreboot_kaisa_without_ipxe.rom"
            
            # 尝试添加 iPXE 到 CBFS（使用 LZMA 压缩）
            echo "🔧 添加 iPXE 到 CBFS（使用 LZMA 压缩）..."
            coreboot/build/cbfstool "$ROM_FILE" add -f ipxe_x64.efi -n efi/ipxe/ipxe.efi -t raw -c lzma || {
              echo "❌ LZMA 压缩失败，尝试无压缩..."
              coreboot/build/cbfstool "$ROM_FILE" add -f ipxe_x64.efi -n efi/ipxe/ipxe.efi -t raw || {
                echo "❌ 无压缩也失败，尝试其他路径..."
                coreboot/build/cbfstool "$ROM_FILE" add -f ipxe_x64.efi -n efi/boot/ipxe.efi -t raw || {
                  echo "❌ 所有路径都失败，保持原始固件"
                  cp "roms/coreboot_kaisa_without_ipxe.rom" "$ROM_FILE"
                }
              }
            }
            
            echo "✅ iPXE 集成完成"
          else
            echo "❌ 未找到 ROM 文件"
          fi
        fi
    
    - name: 验证编译时集成结果 / Verify Build-time Integration
      run: |
        echo "📦 验证编译时 iPXE 集成结果"
        
        # 找到生成的 ROM 文件
        ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
        
        if [ -z "$ROM_FILE" ]; then
          echo "❌ 未找到 ROM 文件"
          ls -la roms/
          exit 1
        fi
        
        echo "📋 ROM 文件: $ROM_FILE"
        
        # 显示固件详细信息
        echo ""
        echo "📊 固件文件详细信息："
        ls -la "$ROM_FILE"
        
        # 验证 CBFS 内容
        echo ""
        echo "📦 详细验证 CBFS 内容："
        echo "=== 完整 CBFS 内容 ==="
        coreboot/build/cbfstool "$ROM_FILE" print
        
        echo ""
        echo "=== 查找 iPXE 相关条目 ==="
        coreboot/build/cbfstool "$ROM_FILE" print | grep -i ipxe || echo "❌ 未找到 iPXE 条目"
        
        echo ""
        echo "=== 查找 EFI 相关条目 ==="
        coreboot/build/cbfstool "$ROM_FILE" print | grep -i efi || echo "❌ 未找到 EFI 条目"
        
        echo ""
        echo "=== 查找 boot 相关条目 ==="
        coreboot/build/cbfstool "$ROM_FILE" print | grep -i boot || echo "❌ 未找到 boot 条目"
        
        echo ""
        echo "=== 检查 EFI 应用程序类型 ==="
        coreboot/build/cbfstool "$ROM_FILE" print | grep -E "(efi|boot)" | head -10
        
        echo ""
        echo "=== 检查 iPXE 文件大小 ==="
        if coreboot/build/cbfstool "$ROM_FILE" print | grep -q "ipxe.efi"; then
          echo "✅ iPXE EFI 文件已找到"
          coreboot/build/cbfstool "$ROM_FILE" print | grep "ipxe.efi"
        else
          echo "❌ iPXE EFI 文件未找到"
        fi
        
        # 生成校验和
        echo "🔐 生成固件校验和..."
        cd roms
        
        # 删除旧的校验和文件
        rm -f *.sha1
        
        # 为固件生成校验和
        echo "生成固件校验和..."
        ROM_BASENAME=$(basename "$ROM_FILE")
        sha1sum "$ROM_BASENAME" > "${ROM_BASENAME}.sha1"
        
        echo "✅ 校验和已生成："
        ls -la *.sha1
        cat *.sha1
        
        cd ..

    - name: 列出编译产物 / List Build Artifacts
      run: |
        echo "=== 编译完成的固件 / Compiled Firmware ==="
        ls -lh roms/
        
        echo ""
        echo "📦 固件说明："
        echo "1. coreboot_*.rom - 编译时集成了 iPXE 的完整固件（推荐）"
        echo "   - 使用预编译 iPXE EFI 文件"
        echo "   - 编译时集成，空间利用更高效"
        echo "   - 启动菜单会显示 iPXE 选项"

    - name: 上传固件 / Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-firmware-kaisa-${{ github.run_number }}
        path: roms/*.rom
        retention-days: 30

    - name: 上传 iPXE 文件 / Upload iPXE Files
      uses: actions/upload-artifact@v4
      with:
        name: ipxe-boot-files-${{ github.run_number }}
        path: |
          ipxe_x64.efi
        retention-days: 30

    - name: 上传校验和 / Upload Checksums
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-checksums-kaisa-${{ github.run_number }}
        path: roms/*.sha1
        retention-days: 30

    - name: 创建 Release / Create Release
      if: ${{ inputs.release == true }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: firmware-kaisa-${{ github.run_number }}
        name: Coreboot Firmware - kaisa
        body: |
          ## Coreboot 固件编译 / Coreboot Firmware Build
          
          **设备 / Device:** Acer Chromebox CXI4 (kaisa)
          **Payload:** UEFI (MrChromebox EDK2)
          **网络支持 / Network:** ✅ EDK2 原生网络栈 + iPXE 集成
          **构建日期 / Build Date:** ${{ github.run_id }}
          **源码 / Source:** MrChromebox Coreboot
          
          ### 固件说明 / Firmware Description
          本次构建使用**编译时集成**方式：
          
          **coreboot_edk2-kaisa-mrchromebox_*.rom** - 编译时集成 iPXE 的完整固件 ⭐**推荐**
             - 使用预编译 iPXE EFI 文件
             - 编译时集成，空间利用更高效
             - 启动菜单会显示 iPXE 选项
             - 无需 U 盘即可网络启动
             - 文件大小：约 16MB（包含 iPXE）
             - 解决了 CBFS 空间紧张问题
          
          ### 使用说明 / Instructions
          
          **编译时集成 iPXE 固件：**
          1. 下载 `coreboot_edk2-kaisa-mrchromebox_*.rom`
          2. 使用 flashrom 刷写：`flashrom -p internal -w coreboot_edk2-kaisa-mrchromebox_*.rom`
          3. 重启后在 UEFI 启动菜单选择 iPXE
          4. 享受编译时集成的空间优势！
          
          ### 固件特性 / Features
          - ✅ 完整 UEFI 环境（MrChromebox EDK2）
          - ✅ EDK2 原生网络栈（PXE/HTTP/iSCSI）
          - ✅ 编译时集成 iPXE（空间高效）
          - ✅ 预编译 iPXE EFI 文件（稳定可靠）
          - ✅ RTL8168 网卡完整支持
          - ✅ 启动菜单自动显示 iPXE 选项
          
          ### 网络启动说明 / Network Boot
          1. 启动后进入 UEFI 启动菜单
          2. 选择 "iPXE" 或 "UEFI Application" 选项
          3. 自动进入 iPXE 网络启动环境
          4. 支持 DHCP、HTTP、HTTPS 等协议
          
          ### 文件清单 / File List
          
          **固件文件 / Firmware Files:**
          - `coreboot_edk2-kaisa-mrchromebox_YYYYMMDD.rom` - 编译时集成 iPXE 版本（推荐）
          - `coreboot_edk2-kaisa-mrchromebox_YYYYMMDD.rom.sha1` - 固件校验和
          
          **iPXE 启动文件 / iPXE Boot Files:**
          - `ipxe_x64.efi` - 预编译 iPXE EFI 应用程序（用于编译时集成）
          
          ### iPXE 文件说明 / iPXE Files Description
          
          **ipxe_x64.efi**：
          - 预编译 iPXE EFI 应用程序
          - 专门为 RTL8111H/RTL8168 网卡优化
          - 文件较小，适合固件集成
          - 支持 DHCP 自动 PXE 引导 WDS
          - 编译时集成，空间利用更高效
          - 智能 WDS 服务器自动发现
          
          ### WDS 服务器配置 / WDS Server Configuration
          
          iPXE 支持 DHCP 自动 PXE 引导 WDS：
          
          **DHCP 自动配置**（推荐方式）
          - 在 DHCP 服务器中设置 option 66 (next-server) 和 option 67 (filename)
          - iPXE 会自动使用这些信息连接 WDS 服务器
          - 标准 WDS 启动文件：`boot/x64/wdsmgfw.efi` (UEFI) 或 `boot/x64/wdsnbp.com` (BIOS)
          
          **自动发现备用方案**
          - 如果 DHCP 未配置，iPXE 会自动尝试常见地址
          - 支持私有地址段扫描：192.168.x.10, 10.0.x.10, 172.16.0.10
          
          
        files: |
          roms/coreboot_*.rom
          roms/*.sha1
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

