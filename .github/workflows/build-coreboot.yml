name: Build Coreboot Firmware

on:
  # 支持手动触发，可选择设备和选项
  workflow_dispatch:
    inputs:
      platform:
        description: '选择平台 / Select Platform (查看README了解各平台设备)'
        required: true
        type: choice
        options:
          - 'Comet Lake (cml) - 22设备'
          - 'Jasper Lake (jsl) - 49设备'
          - 'Gemini Lake (glk) - 34设备'
          - 'Alder Lake-N (adl_n) - 29设备'
          - 'Alder Lake (adl) - 27设备'
          - 'Apollo Lake (apl) - 20设备'
          - 'Bay Trail (byt) - 16设备'
          - 'Kaby Lake (kbl) - 14设备'
          - 'Tiger Lake (tgl) - 13设备'
          - 'Broadwell (bdw) - 11设备'
          - 'Braswell (bsw) - 11设备'
          - 'Haswell (hsw) - 9设备'
          - 'Skylake (skl) - 8设备'
          - 'Picasso (pco) - 8设备'
          - 'Sandy/Ivy Bridge (snb_ivb) - 6设备'
          - 'Stoney Ridge (str) - 6设备'
          - 'Mendocino (mdn) - 5设备'
          - 'Cezanne (czn) - 2设备'
          - 'Whiskey Lake (whl) - 2设备'
          - '所有平台 (all) - 292设备'
        default: 'Comet Lake (cml) - 22设备'
      device:
        description: '设备型号 / Device Model (例如kaisa, 留空=all, 查看README获取完整列表)'
        required: false
        type: string
        default: 'kaisa'
      enable_pxe:
        description: '启用 PXE 网络启动 / Enable PXE Network Boot'
        required: true
        type: boolean
        default: true
      release:
        description: '创建 Release 发布 / Create Release'
        required: false
        type: boolean
        default: false

  # 支持推送触发（可选）
  push:
    branches:
      - main
    paths:
      - 'configs/**'
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出构建仓库 / Checkout Builder Repository
      uses: actions/checkout@v4

    - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
      run: |
        git clone https://github.com/mrchromebox/coreboot.git coreboot
        cd coreboot
        git submodule update --init --checkout --recursive

    - name: 应用自定义配置 / Apply Custom Configs
      run: |
        # 如果存在自定义配置，复制到 coreboot 目录
        if [ -d "configs" ]; then
          cp -r configs/* coreboot/configs/ || true
        fi

    - name: 确定目标设备 / Determine Target Device
      id: device
      run: |
        # 从选项中提取平台代码（括号中的部分）
        PLATFORM_INPUT="${{ inputs.platform }}"
        PLATFORM=$(echo "$PLATFORM_INPUT" | sed 's/.*(\([^)]*\)).*/\1/')
        DEVICE="${{ inputs.device }}"
        
        echo "选择的平台: $PLATFORM_INPUT"
        echo "平台代码: $PLATFORM"
        
        # 如果平台是 all，编译所有设备
        if [ "$PLATFORM" = "all" ]; then
          TARGET="all"
          echo "target=all" >> $GITHUB_OUTPUT
          echo "platform=all" >> $GITHUB_OUTPUT
          echo "📦 编译所有平台的所有设备 (292个) / Building all devices"
        # 如果设备为空或为 all，编译该平台的所有设备  
        elif [ -z "$DEVICE" ] || [ "$DEVICE" = "all" ]; then
          TARGET=""
          # 获取该平台的所有设备
          cd coreboot
          DEVICES=$(find configs/$PLATFORM -name "*.uefi" -type f 2>/dev/null | sed "s|configs/$PLATFORM/config\.||; s|\.uefi||" | tr '\n' ' ')
          TARGET="$DEVICES"
          DEVICE_COUNT=$(echo $DEVICES | wc -w)
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "📦 编译平台 $PLATFORM 的所有设备 ($DEVICE_COUNT 个): $TARGET"
        else
          # 编译指定设备
          TARGET="$DEVICE"
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "📦 编译设备: $PLATFORM/$DEVICE"
        fi

    - name: 添加 PXE 支持配置 / Add PXE Support
      if: ${{ inputs.enable_pxe == true }}
      run: |
        cd coreboot
        PLATFORM="${{ steps.device.outputs.platform }}"
        TARGET="${{ steps.device.outputs.target }}"
        
        # 如果是编译所有设备
        if [ "$TARGET" = "all" ]; then
          echo "为所有设备添加 PXE 支持..."
          find configs -name "*.uefi" -type f | while read cfg; do
            if ! grep -q "CONFIG_EDK2_NETWORK_PXE_SUPPORT" "$cfg"; then
              echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> "$cfg"
            fi
          done
        else
          # 为指定设备添加 PXE 支持
          for DEVICE in $TARGET; do
            CONFIG_FILE="configs/$PLATFORM/config.$DEVICE.uefi"
            if [ -f "$CONFIG_FILE" ]; then
              if ! grep -q "CONFIG_EDK2_NETWORK_PXE_SUPPORT" "$CONFIG_FILE"; then
                echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> "$CONFIG_FILE"
                echo "✅ 已为 $PLATFORM/$DEVICE 添加 PXE 支持"
              else
                echo "ℹ️  $PLATFORM/$DEVICE 已启用 PXE 支持"
              fi
            fi
          done
        fi

    - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
      run: docker pull coreboot/coreboot-sdk:latest

    - name: 构建工具链 / Build Toolchain
      run: |
        docker run --rm --user root \
          -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
          -w /home/coreboot/coreboot \
          coreboot/coreboot-sdk:latest \
          bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                   make crossgcc-i386 CPUS=$(nproc)"

    - name: 编译固件 / Build Firmware
      run: |
        mkdir -p roms
        TARGET="${{ steps.device.outputs.target }}"
        docker run --rm --user root \
          -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
          -v ${{ github.workspace }}/roms:/home/coreboot/roms \
          -w /home/coreboot/coreboot \
          coreboot/coreboot-sdk:latest \
          bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                   ./build-uefi.sh $TARGET"

    - name: 列出编译产物 / List Build Artifacts
      run: |
        echo "=== 编译完成的固件 / Compiled Firmware ==="
        ls -lh roms/

    - name: 上传固件 / Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-firmware-${{ steps.device.outputs.platform }}-${{ github.run_number }}
        path: roms/*.rom
        retention-days: 30

    - name: 上传校验和 / Upload Checksums
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-checksums-${{ steps.device.outputs.platform }}-${{ github.run_number }}
        path: roms/*.sha1
        retention-days: 30

    - name: 创建 Release / Create Release
      if: ${{ inputs.release == true }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: firmware-${{ steps.device.outputs.platform }}-${{ github.run_number }}
        name: Coreboot Firmware - ${{ inputs.platform }}
        body: |
          ## Coreboot 固件编译 / Coreboot Firmware Build
          
          **平台 / Platform:** ${{ inputs.platform }}
          **设备 / Device:** ${{ inputs.device }}
          **PXE 支持 / PXE Support:** ${{ inputs.enable_pxe }}
          **构建日期 / Build Date:** ${{ github.event.head_commit.timestamp }}
          **源码版本 / Source:** MrChromebox Coreboot
          
          ### 使用说明 / Instructions
          1. 下载对应设备的 `.rom` 文件
          2. 使用 flashrom 或其他工具刷写固件
          3. 详细说明请参考项目 README
          
        files: |
          roms/*.rom
          roms/*.sha1
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

