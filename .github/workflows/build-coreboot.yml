name: Build Coreboot Firmware

on:
  # 支持手动触发
  workflow_dispatch:
    inputs:
      release:
        description: '创建 Release 发布 / Create Release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出构建仓库 / Checkout Builder Repository
      uses: actions/checkout@v4

    - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
      run: |
        git clone https://github.com/mrchromebox/coreboot.git coreboot
        cd coreboot
        git submodule update --init --checkout --recursive

    - name: 替换自定义 Logo / Replace Custom Logo
      run: |
        if [ -f "coreboot_logo.bmp" ]; then
          cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
          echo "✅ 已替换为自定义 Logo"
        else
          echo "ℹ️  使用默认 Logo"
        fi

    - name: 添加 PXE 支持 / Add PXE Support
      run: |
        echo "📝 添加 PXE 和网络栈配置到 kaisa 配置文件"
        # 基础 PXE 支持
        echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> coreboot/configs/cml/config.kaisa.uefi
        # PCI 网卡驱动支持
        echo "CONFIG_EDK2_LOAD_OPTION_ROMS=y" >> coreboot/configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_PRIORITIZE_INTERNAL=y" >> coreboot/configs/cml/config.kaisa.uefi
        cat coreboot/configs/cml/config.kaisa.uefi

    - name: 验证设备树配置 / Verify Device Tree Configuration
      run: |
        echo "📋 验证现有 RTL8111H 网卡配置："
        cd coreboot
        echo "pcie_rp7 配置（RTL8111H 以太网网卡）："
        grep -A 10 -B 2 "device ref pcie_rp7" src/mainboard/google/puff/variants/kaisa/overridetree.cb
        echo "✅ RTL8111H 网卡已在 pcie_rp7 中正确配置"

    - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
      run: docker pull coreboot/coreboot-sdk:latest

    - name: 准备 iPXE 配置 / Prepare iPXE Configuration
      run: |
        echo "📝 创建 iPXE 嵌入式脚本"
        cat > ipxe_embed.ipxe << 'EOF'
        #!ipxe
        # iPXE 嵌入式启动脚本
        echo iPXE 网络启动环境已就绪
        echo 按 Ctrl+B 进入 iPXE shell
        autoboot || shell
        EOF
        
        echo "✅ iPXE 配置已创建"
        cat ipxe_embed.ipxe
    
    - name: 编译 iPXE EFI 应用 / Build iPXE EFI Application
      run: |
        echo "📦 编译 iPXE EFI 应用"
        
        # 先确保 iPXE 源码已下载
        docker run --rm --user root \
          -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
          -v ${{ github.workspace }}:/workspace \
          -w /home/coreboot/coreboot \
          coreboot/coreboot-sdk:latest \
          bash -c "git clone https://github.com/ipxe/ipxe.git ipxe_build && \
                   cd ipxe_build/src && \
                   cp /workspace/ipxe_embed.ipxe . && \
                   make bin-x86_64-efi/ipxe.efi EMBED=ipxe_embed.ipxe && \
                   cp bin-x86_64-efi/ipxe.efi /workspace/ipxe_x64.efi"
        
        echo "✅ iPXE EFI 已编译"
        ls -lh ipxe_x64.efi

    - name: 编译固件 / Build Firmware
      run: |
        mkdir -p roms
        echo "📦 使用 MrChromebox build-uefi.sh 编译 kaisa"
        
        docker run --rm --user root \
          -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
          -v ${{ github.workspace }}/roms:/home/coreboot/roms \
          -w /home/coreboot/coreboot \
          coreboot/coreboot-sdk:latest \
          bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                   ./build-uefi.sh kaisa"
    
    - name: 集成 iPXE 到固件 / Integrate iPXE into Firmware
      run: |
        echo "📦 将 iPXE EFI 集成到固件 CBFS"
        
        # 找到生成的 ROM 文件
        ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
        ROM_BASENAME=$(basename "$ROM_FILE")
        
        if [ -z "$ROM_FILE" ]; then
          echo "❌ 未找到 ROM 文件"
          ls -la roms/
          exit 1
        fi
        
        echo "📋 ROM 文件: $ROM_FILE"
        echo "📋 文件大小: $(ls -lh "$ROM_FILE" | awk '{print $5}')"
        
        # 备份原始固件
        cp "$ROM_FILE" "${ROM_FILE}.backup"
        
        # 使用 cbfstool 添加 iPXE 到 CBFS
        echo "🔧 使用 cbfstool 添加 iPXE..."
        coreboot/build/cbfstool "$ROM_FILE" add -f ipxe_x64.efi -n efi/boot/bootx64.efi -t raw -c lzma
        
        echo "✅ iPXE 已集成到固件"
        echo "📦 验证 CBFS 内容："
        coreboot/build/cbfstool "$ROM_FILE" print | grep -E "ipxe|bootx64" || echo "iPXE 条目："
        coreboot/build/cbfstool "$ROM_FILE" print
        
        echo ""
        echo "📊 固件大小对比："
        echo "原始: $(ls -lh "${ROM_FILE}.backup" | awk '{print $5}')"
        echo "集成后: $(ls -lh "$ROM_FILE" | awk '{print $5}')"

    - name: 列出编译产物 / List Build Artifacts
      run: |
        echo "=== 编译完成的固件 / Compiled Firmware ==="
        ls -lh roms/

    - name: 上传固件 / Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-firmware-kaisa-${{ github.run_number }}
        path: roms/*.rom
        retention-days: 30

    - name: 上传校验和 / Upload Checksums
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-checksums-kaisa-${{ github.run_number }}
        path: roms/*.sha1
        retention-days: 30

    - name: 创建 Release / Create Release
      if: ${{ inputs.release == true }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: firmware-kaisa-${{ github.run_number }}
        name: Coreboot Firmware - kaisa
        body: |
          ## Coreboot 固件编译 / Coreboot Firmware Build
          
          **设备 / Device:** Acer Chromebox CXI4 (kaisa)
          **Payload:** UEFI (EDK2/TianoCore)
          **PXE 支持 / PXE Support:** ✅ Enabled (EDK2 Native)
          **构建日期 / Build Date:** ${{ github.run_id }}
          **源码 / Source:** MrChromebox Coreboot
          
          ### 使用说明 / Instructions
          1. 下载 `.rom` 固件文件
          2. 使用 flashrom 刷写固件：`flashrom -p internal -w coreboot_*.rom`
          3. 详细说明请参考项目 README
          
          ### 固件特性 / Features
          - ✅ UEFI 固件，支持 GPT 分区和现代操作系统
          - ✅ EDK2 原生 PXE 网络启动支持
          - ✅ 支持 Realtek 和 ASIX USB 网卡
          - ✅ 已启用 `CONFIG_EDK2_NETWORK_PXE_SUPPORT=y`
          
          ### 网络启动说明 / Network Boot
          启动时按 ESC 进入启动菜单，选择网络启动选项进行 PXE 启动。
          
          
        files: |
          roms/*.rom
          roms/*.sha1
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

