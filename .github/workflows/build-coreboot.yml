name: Build Coreboot Firmware

on:
  # 支持手动触发
  workflow_dispatch:
    inputs:
      release:
        description: '创建 Release 发布 / Create Release'
        required: false
        type: boolean
        default: false
      wds_server:
        description: 'WDS 服务器地址 / WDS Server IP (可选，如: 192.168.1.100)'
        required: false
        type: string
        default: ''
      wds_boot_file:
        description: 'WDS 启动文件 / WDS Boot File (可选，如: bootmgr.efi 或 bootx64.efi)'
        required: false
        type: string
        default: 'bootmgr.efi'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出构建仓库 / Checkout Builder Repository
      uses: actions/checkout@v4

    - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
      run: |
        echo "📥 克隆 MrChromebox coreboot（包含网络支持）"
        git clone https://github.com/MrChromebox/coreboot.git coreboot
        cd coreboot
        git submodule update --init --checkout --recursive

    - name: 替换自定义 Logo / Replace Custom Logo
      run: |
        if [ -f "coreboot_logo.bmp" ]; then
          cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
          echo "✅ 已替换为自定义 Logo"
        else
          echo "ℹ️  使用默认 Logo"
        fi

    - name: 配置网络支持 / Configure Network Support
      run: |
        echo "📝 添加网络栈配置到 kaisa 配置文件"
        cd coreboot
        
        # 显示原始配置
        echo "📋 原始配置："
        cat configs/cml/config.kaisa.uefi
        
        # 添加网络支持配置
        echo "" >> configs/cml/config.kaisa.uefi
        echo "# 网络支持配置" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_LOAD_OPTION_ROMS=y" >> configs/cml/config.kaisa.uefi
        echo "CONFIG_EDK2_PRIORITIZE_INTERNAL=y" >> configs/cml/config.kaisa.uefi
        
        echo ""
        echo "✅ 网络配置已添加"
        echo "📋 最终配置："
        cat configs/cml/config.kaisa.uefi

    - name: 验证设备树配置 / Verify Device Tree Configuration
      run: |
        echo "📋 验证现有 RTL8111H 网卡配置："
        cd coreboot
        echo "pcie_rp7 配置（RTL8111H 以太网网卡）："
        grep -A 10 -B 2 "device ref pcie_rp7" src/mainboard/google/puff/variants/kaisa/overridetree.cb
        echo "✅ RTL8111H 网卡已在 pcie_rp7 中正确配置"

    - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
      run: docker pull coreboot/coreboot-sdk:latest

    - name: 编译 iPXE EFI 应用 / Build iPXE EFI Application
      run: |
        echo "📦 编译 iPXE EFI 应用（用于集成到固件）"
        
        # 创建 iPXE 嵌入式脚本（支持自定义 WDS 服务器配置）
        cat > ipxe_embed.ipxe << EOF
        #!ipxe
        echo ========================================
        echo iPXE Network Boot Environment
        echo WDS Server Auto-Detection
        echo ========================================
        echo.
        echo Initializing network interface...
        dhcp net0 || dhcp || echo Network init failed
        echo.
        echo Network configured successfully
        echo IP: ${ip} Gateway: ${gateway} DNS: ${dns}
        echo.
        echo Detecting WDS server configuration...
        
        # 检查 DHCP 是否提供了 WDS 服务器信息
        isset ${next-server} && echo Next server: ${next-server}
        isset ${filename} && echo Boot file: ${filename}
        
        # 如果 DHCP 提供了完整的启动信息，直接使用
        isset ${next-server} && isset ${filename} && {
          echo Using DHCP provided WDS server...
          chain tftp://${next-server}/${filename}
        }
        
        # 否则尝试自动发现 WDS 服务器
        echo DHCP WDS info not found, trying auto-discovery...
        
        # 尝试自定义 WDS 服务器（如果用户指定了）
        ${{ inputs.wds_server && inputs.wds_boot_file && format('chain tftp://{0}/{1} || ', inputs.wds_server, inputs.wds_boot_file) || '' }}chain tftp://${gateway}/boot/x64/wdsmgfw.efi || \
        chain tftp://${gateway}/boot/x64/wdsnbp.com || \
        chain tftp://192.168.0.10/boot/x64/wdsmgfw.efi || \
        chain tftp://192.168.0.10/boot/x64/wdsnbp.com || \
        chain tftp://192.168.1.10/boot/x64/wdsmgfw.efi || \
        chain tftp://192.168.1.10/boot/x64/wdsnbp.com || \
        chain tftp://192.168.10.10/boot/x64/wdsmgfw.efi || \
        chain tftp://192.168.10.10/boot/x64/wdsnbp.com || \
        chain tftp://10.0.0.10/boot/x64/wdsmgfw.efi || \
        chain tftp://10.0.0.10/boot/x64/wdsnbp.com || \
        chain tftp://10.0.1.10/boot/x64/wdsmgfw.efi || \
        chain tftp://10.0.1.10/boot/x64/wdsnbp.com || \
        chain tftp://10.0.10.10/boot/x64/wdsmgfw.efi || \
        chain tftp://10.0.10.10/boot/x64/wdsnbp.com || \
        chain tftp://172.16.0.10/boot/x64/wdsmgfw.efi || \
        chain tftp://172.16.0.10/boot/x64/wdsnbp.com || {
          echo All WDS servers failed, entering shell
          echo You can manually configure WDS server:
          echo   set next-server <WDS_IP>
          echo   chain tftp://\${next-server}/boot/x64/wdsmgfw.efi
          echo   # or try: chain tftp://\${next-server}/boot/x64/wdsnbp.com
          shell
        }
        EOF
        
        # 编译 iPXE（添加硬件兼容性支持）
        docker run --rm --user root \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          coreboot/coreboot-sdk:latest \
          bash -c "git clone https://github.com/ipxe/ipxe.git ipxe_src && \
                   cd ipxe_src/src && \
                   cp /workspace/ipxe_embed.ipxe . && \
                   echo '🔧 编译 iPXE EFI（启用网络驱动支持）...' && \
                   make bin-x86_64-efi/ipxe.efi \
                     EMBED=ipxe_embed.ipxe \
                     NO_WERROR=1 \
                     ENABLE_HTTP_BOOT=y \
                     ENABLE_HTTPS=y \
                     ENABLE_DHCP=y \
                     ENABLE_PXE=y \
                     ENABLE_REALTEK=y && \
                   cp bin-x86_64-efi/ipxe.efi /workspace/ipxe_x64.efi && \
                   echo '✅ iPXE EFI 编译成功' && \
                   echo '🔧 编译 iPXE ISO（支持所有网卡）...' && \
                   echo '📥 下载 isolinux.bin...' && \
                   wget -O isolinux.bin https://mirror.centos.org/centos/7/os/x86_64/isolinux/isolinux.bin && \
                   make bin/ipxe.iso \
                     EMBED=ipxe_embed.ipxe \
                     NO_WERROR=1 \
                     ENABLE_HTTP_BOOT=y \
                     ENABLE_HTTPS=y \
                     ENABLE_DHCP=y \
                     ENABLE_PXE=y \
                     ISOLINUX_BIN=isolinux.bin && \
                   cp bin/ipxe.iso /workspace/ipxe_boot.iso && \
                   echo '✅ iPXE ISO 编译成功'"
        
        ls -lh ipxe_x64.efi ipxe_boot.iso || echo "❌ iPXE 编译失败"
        
        # 验证 iPXE EFI 文件
        if [ -f "ipxe_x64.efi" ]; then
          echo "✅ iPXE EFI 文件已生成"
          file ipxe_x64.efi
          echo "iPXE 文件前16字节（魔数检查）："
          hexdump -C ipxe_x64.efi | head -2
          
          echo ""
          echo "🔍 检查 iPXE 网络驱动支持（针对 RTL8111H/RTL8168）："
          # 检查 RTL8168 系列驱动（兼容 RTL8111H）
          strings ipxe_x64.efi | grep -i "rtl8168" && echo "✅ 包含 RTL8168 驱动（兼容 RTL8111H）" || echo "❌ 未找到 RTL8168 驱动"
          strings ipxe_x64.efi | grep -i "rtl816" && echo "✅ 包含 RTL816 系列驱动" || echo "❌ 未找到 RTL816 系列驱动"
          strings ipxe_x64.efi | grep -i "realtek" && echo "✅ 包含 Realtek 驱动支持" || echo "❌ 未找到 Realtek 驱动"
          
          echo ""
          echo "🔍 检查网络功能支持："
          strings ipxe_x64.efi | grep -i "dhcp" && echo "✅ 包含 DHCP 支持" || echo "❌ 未找到 DHCP 支持"
          strings ipxe_x64.efi | grep -i "pxe" && echo "✅ 包含 PXE 支持" || echo "❌ 未找到 PXE 支持"
          strings ipxe_x64.efi | grep -i "http" && echo "✅ 包含 HTTP 支持" || echo "❌ 未找到 HTTP 支持"
        else
          echo "❌ iPXE EFI 文件不存在"
        fi
        
        # 验证 iPXE ISO 文件
        if [ -f "ipxe_boot.iso" ]; then
          echo ""
          echo "✅ iPXE ISO 文件已生成"
          file ipxe_boot.iso
          echo "ISO 文件大小: $(ls -lh ipxe_boot.iso | awk '{print $5}')"
          
          echo ""
          echo "🔍 检查 ISO 文件中的网卡驱动支持："
          # 检查 ISO 文件中的驱动字符串
          strings ipxe_boot.iso | grep -i "rtl816" && echo "✅ 包含 RTL816 系列驱动" || echo "❌ 未找到 RTL816 驱动"
          strings ipxe_boot.iso | grep -i "e1000" && echo "✅ 包含 E1000 驱动" || echo "❌ 未找到 E1000 驱动"
          strings ipxe_boot.iso | grep -i "broadcom" && echo "✅ 包含 Broadcom 驱动" || echo "❌ 未找到 Broadcom 驱动"
        else
          echo "❌ iPXE ISO 文件不存在"
        fi

    - name: 编译固件 / Build Firmware
      run: |
        mkdir -p roms
        echo "📦 使用 MrChromebox build-uefi.sh 编译 kaisa"
        
        docker run --rm --user root \
          -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
          -v ${{ github.workspace }}/roms:/home/coreboot/roms \
          -w /home/coreboot/coreboot \
          coreboot/coreboot-sdk:latest \
          bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                   ./build-uefi.sh kaisa && \
                   chmod 644 /home/coreboot/roms/*.rom"
    
    - name: 集成 iPXE 到固件 / Integrate iPXE into Firmware
      run: |
        echo "📦 将 iPXE EFI 集成到固件 CBFS"
        
        # 检查 iPXE 是否编译成功
        if [ ! -f "ipxe_x64.efi" ]; then
          echo "⚠️  iPXE 未编译，跳过集成"
          exit 0
        fi
        
        # 找到生成的 ROM 文件
        ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
        
        if [ -z "$ROM_FILE" ]; then
          echo "❌ 未找到 ROM 文件"
          ls -la roms/
          exit 1
        fi
        
        echo "📋 ROM 文件: $ROM_FILE"
        echo "📋 iPXE 文件: ipxe_x64.efi ($(ls -lh ipxe_x64.efi | awk '{print $5}'))"
        
        # 备份原始固件
        cp "$ROM_FILE" "${ROM_FILE}.original"
        cp "$ROM_FILE" "roms/coreboot_kaisa_without_ipxe.rom"
        
        # 创建集成 iPXE 的新固件文件
        INTEGRATED_ROM="${ROM_FILE%.rom}_with_ipxe.rom"
        cp "$ROM_FILE" "$INTEGRATED_ROM"
        
        # 使用 cbfstool 添加 iPXE 到新文件
        echo "🔧 将 iPXE 添加到新固件文件：$INTEGRATED_ROM"
        
        # 根据官方文档，使用正确的路径和类型
        echo "🔧 添加 iPXE 到 CBFS（使用官方推荐方式）..."
        
        # 官方推荐：添加到 efi/ipxe.efi 路径，类型为 raw（不压缩）
        coreboot/build/cbfstool "$INTEGRATED_ROM" add -f ipxe_x64.efi -n efi/ipxe.efi -t raw
        
        # 备用路径：添加到 efi/boot/ 目录
        coreboot/build/cbfstool "$INTEGRATED_ROM" add -f ipxe_x64.efi -n efi/boot/ipxe.efi -t raw
        
        # 替换原始文件
        mv "$INTEGRATED_ROM" "$ROM_FILE"
        
        echo "✅ iPXE 已集成到固件"
        echo ""
        echo "📦 详细验证 CBFS 内容："
        echo "=== 完整 CBFS 内容 ==="
        coreboot/build/cbfstool "$ROM_FILE" print
        
        echo ""
        echo "=== 查找 iPXE 相关条目 ==="
        coreboot/build/cbfstool "$ROM_FILE" print | grep -i ipxe || echo "❌ 未找到 iPXE 条目"
        
        echo ""
        echo "=== 查找 EFI 相关条目 ==="
        coreboot/build/cbfstool "$ROM_FILE" print | grep -i efi || echo "❌ 未找到 EFI 条目"
        
        echo ""
        echo "=== 检查 iPXE 文件大小 ==="
        if coreboot/build/cbfstool "$ROM_FILE" print | grep -q "ipxe.efi"; then
          echo "✅ iPXE EFI 文件已找到"
          coreboot/build/cbfstool "$ROM_FILE" print | grep "ipxe.efi"
        else
          echo "❌ iPXE EFI 文件未找到"
        fi
        
        echo ""
        echo "📊 固件大小对比："
        echo "原始: $(ls -lh "roms/coreboot_kaisa_without_ipxe.rom" | awk '{print $5}')"
        echo "集成 iPXE 后: $(ls -lh "$ROM_FILE" | awk '{print $5}')"
        
        # 为两个固件生成正确的校验和
        echo "🔐 生成固件校验和..."
        cd roms
        
        # 删除旧的校验和文件
        rm -f *.sha1
        
        # 为原始固件生成校验和
        echo "生成原始固件校验和..."
        sha1sum coreboot_kaisa_without_ipxe.rom > coreboot_kaisa_without_ipxe.rom.sha1
        
        # 为集成 iPXE 的固件生成新的校验和
        echo "生成集成 iPXE 固件校验和..."
        ROM_BASENAME=$(basename "$ROM_FILE")
        sha1sum "$ROM_BASENAME" > "${ROM_BASENAME}.sha1"
        
        echo "✅ 校验和已生成："
        ls -la *.sha1
        cat *.sha1
        
        cd ..

    - name: 列出编译产物 / List Build Artifacts
      run: |
        echo "=== 编译完成的固件 / Compiled Firmware ==="
        ls -lh roms/
        
        echo ""
        echo "📦 固件说明："
        echo "1. coreboot_*.rom - 集成了 iPXE 的完整固件（推荐）"
        echo "2. coreboot_kaisa_without_ipxe.rom - 不含 iPXE 的原始固件"

    - name: 上传固件 / Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-firmware-kaisa-${{ github.run_number }}
        path: roms/*.rom
        retention-days: 30

    - name: 上传 iPXE 文件 / Upload iPXE Files
      uses: actions/upload-artifact@v4
      with:
        name: ipxe-boot-files-${{ github.run_number }}
        path: |
          ipxe_x64.efi
          ipxe_boot.iso
        retention-days: 30

    - name: 上传校验和 / Upload Checksums
      uses: actions/upload-artifact@v4
      with:
        name: coreboot-checksums-kaisa-${{ github.run_number }}
        path: roms/*.sha1
        retention-days: 30

    - name: 创建 Release / Create Release
      if: ${{ inputs.release == true }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: firmware-kaisa-${{ github.run_number }}
        name: Coreboot Firmware - kaisa
        body: |
          ## Coreboot 固件编译 / Coreboot Firmware Build
          
          **设备 / Device:** Acer Chromebox CXI4 (kaisa)
          **Payload:** UEFI (MrChromebox EDK2)
          **网络支持 / Network:** ✅ EDK2 原生网络栈 + iPXE 集成
          **构建日期 / Build Date:** ${{ github.run_id }}
          **源码 / Source:** MrChromebox Coreboot
          
          ### 固件说明 / Firmware Description
          本次构建包含**两个版本**的固件：
          
          1. **coreboot_edk2-kaisa-mrchromebox_*.rom** - 集成了 iPXE 的完整固件 ⭐**推荐**
             - 包含 iPXE EFI 应用在 CBFS 中
             - 启动菜单会显示 iPXE 选项
             - 无需 U 盘即可网络启动
             - 文件大小：约 16MB（包含 iPXE）
          
          2. **coreboot_kaisa_without_ipxe.rom** - 不含 iPXE 的原始固件
             - 仅包含 EDK2 原生网络栈
             - 需要外部 iPXE 文件（U 盘加载）
             - 文件大小：约 15MB（不含 iPXE）
             - 适合需要更小固件或自定义 iPXE 的用户
          
          ### 使用说明 / Instructions
          
          **推荐使用集成 iPXE 版本：**
          1. 下载 `coreboot_edk2-kaisa-mrchromebox_*.rom`
          2. 使用 flashrom 刷写：`flashrom -p internal -w coreboot_edk2-kaisa-mrchromebox_*.rom`
          3. 重启后在 UEFI 启动菜单选择 iPXE
          
          **或者使用原始版本 + 手动 iPXE：**
          1. 下载 `coreboot_kaisa_without_ipxe.rom`
          2. 使用 flashrom 刷写：`flashrom -p internal -w coreboot_kaisa_without_ipxe.rom`
          3. 准备 iPXE U 盘，启动时加载 `ipxe.efi`
          
          ### 固件特性 / Features
          - ✅ 完整 UEFI 环境（MrChromebox EDK2）
          - ✅ EDK2 原生网络栈（PXE/HTTP/iSCSI）
          - ✅ iPXE 集成在固件中（无需 U 盘）
          - ✅ RTL8168 网卡完整支持
          - ✅ 启动菜单自动显示 iPXE 选项
          
          ### 网络启动说明 / Network Boot
          1. 启动后进入 UEFI 启动菜单
          2. 选择 "iPXE" 或 "UEFI Application" 选项
          3. 自动进入 iPXE 网络启动环境
          4. 支持 DHCP、HTTP、HTTPS 等协议
          
          ### 文件清单 / File List
          
          **固件文件 / Firmware Files:**
          - `coreboot_edk2-kaisa-mrchromebox_YYYYMMDD.rom` - 集成 iPXE 版本（推荐）
          - `coreboot_edk2-kaisa-mrchromebox_YYYYMMDD.rom.sha1` - 集成版本校验和
          - `coreboot_kaisa_without_ipxe.rom` - 原始版本（不含 iPXE）
          - `coreboot_kaisa_without_ipxe.rom.sha1` - 原始版本校验和
          
          **iPXE 启动文件 / iPXE Boot Files:**
          - `ipxe_x64.efi` - iPXE EFI 应用程序（RTL8168 优化，可手动加载）
          - `ipxe_boot.iso` - iPXE ISO 镜像（支持所有网卡，兼容 Ventoy）
          
          ### iPXE 文件说明 / iPXE Files Description
          
          **ipxe_x64.efi**：
          - 专门为 RTL8111H/RTL8168 网卡优化
          - 文件较小，适合固件集成
          - 可在 UEFI Shell 中手动加载
          
          **ipxe_boot.iso**：
          - 包含所有主流网卡驱动支持
          - 支持 Intel、Realtek、Broadcom、Marvell 等
          - 智能 WDS 服务器自动发现
          - 支持 DHCP 配置和手动配置
          - 兼容 Ventoy，可直接复制到 Ventoy 分区使用
          
          ### WDS 服务器配置 / WDS Server Configuration
          
          iPXE 启动文件支持多种 WDS 服务器配置方式：
          
          1. **DHCP 自动配置**（推荐）
             - 在 DHCP 服务器中设置 option 66 (next-server) 和 option 67 (filename)
             - iPXE 会自动使用这些信息连接 WDS 服务器
             - 标准 WDS 启动文件：`boot/x64/wdsmgfw.efi` (UEFI) 或 `boot/x64/wdsnbp.com` (BIOS)
          
          2. **工作流自定义配置**
             - 运行工作流时可指定 WDS 服务器地址和启动文件
             - iPXE 会优先尝试自定义的 WDS 服务器
          
          3. **自动发现**
             - 尝试网关地址作为 WDS 服务器
             - 尝试私有地址段的服务器地址：
               - 192.168.0.10, 192.168.1.10, 192.168.10.10
               - 10.0.0.10, 10.0.1.10, 10.0.10.10
               - 172.16.0.10
             - 优先支持 UEFI 启动文件：bootmgr.efi, bootx64.efi
          
          4. **手动配置**
             - 失败时进入 iPXE shell
             - 可手动设置服务器地址和启动文件
          
          
        files: |
          roms/coreboot_*.rom
          roms/*.sha1
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

