name: Cleanup Releases

on:
  workflow_dispatch:
    inputs:
      keep_indexes:
        description: "保留序号（按创建时间降序，从1开始），空格分隔，如: 1 3 5"
        required: false
        type: string
        default: ""

permissions:
  contents: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: 显示参数 / Show Inputs
        run: |
          echo "KEEP_INDEXES='${{ inputs.keep_indexes }}'"

      - name: 清理 Releases / Cleanup Releases
        env:
          GH_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEEP_INDEXES: ${{ inputs.keep_indexes }}
        run: |
          set -euo pipefail

          owner_repo="$GH_REPO"
          api_base="https://api.github.com"

          # 收集所有 release（分页）到临时文件，避免命令行过长
          releases_file=$(mktemp)
          echo "[]" > "$releases_file"
          page=1
          per_page=100
          while :; do
            page_json=$(curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
              "$api_base/repos/$owner_repo/releases?per_page=$per_page&page=$page")
            count=$(echo "$page_json" | jq 'length')
            if [ "$count" = "0" ]; then
              break
            fi
            page_file=$(mktemp)
            echo "$page_json" > "$page_file"
            jq -c -s 'add' "$releases_file" "$page_file" > "${releases_file}.tmp"
            mv "${releases_file}.tmp" "$releases_file"
            rm -f "$page_file"
            page=$((page+1))
          done

          echo "共获取到 Releases: $(jq 'length' "$releases_file")"

          # 按创建时间降序
          filtered=$(jq -c "sort_by(.created_at) | reverse" "$releases_file")
          total=$(echo "$filtered" | jq 'length')
          echo "过滤后数量: $total"

          # 解析保留序号（以空格分隔，从1开始）
          keep_set=$(echo "$KEEP_INDEXES" | xargs -n1 | awk 'NF{print $1}' | sort -n | tr '\n' ' ')
          echo "保留序号: $keep_set"

          # 计算删除列表
          to_delete="[]"
          if [ -z "$keep_set" ]; then
            # 全删除
            to_delete="$filtered"
          else
            for idx in $(seq 1 $total); do
              if echo " $keep_set " | grep -q " $idx "; then
                continue
              fi
              j=$((idx-1))
              item=$(echo "$filtered" | jq -c ".[$j]")
              to_delete=$(jq -c --argjson a "$to_delete" --argjson b "$item" -n '$a + [$b]')
            done
          fi

          del_count=$(echo "$to_delete" | jq 'length')
          echo "计划删除数量: $del_count"

          for i in $(seq 0 $((del_count-1))); do
            rel=$(echo "$to_delete" | jq -c ".[$i]")
            id=$(echo "$rel" | jq -r .id)
            tag=$(echo "$rel" | jq -r .tag_name)
            name=$(echo "$rel" | jq -r .name)
            draft=$(echo "$rel" | jq -r .draft)
            prerelease=$(echo "$rel" | jq -r .prerelease)
            echo "— 将删除: id=$id tag=$tag name=$name draft=$draft prerelease=$prerelease"

            # 删除 release
            curl -sS -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
              "$api_base/repos/$owner_repo/releases/$id" | jq -r '.' || true
            echo "已删除 release: $id ($tag)"

            # 删除 tag（可选）
            if [ -n "$tag" ] && [ "$tag" != "null" ]; then
              # refs/tags/<tag> 需要进行 URL 编码
              ref_path="refs/tags/$(printf %s "$tag" | sed 's#/#%2F#g')"
              curl -sS -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
                "$api_base/repos/$owner_repo/git/$ref_path" | jq -r '.' || true
              echo "已删除 tag: $tag"
            fi
          done

          echo "✅ 清理完成"

