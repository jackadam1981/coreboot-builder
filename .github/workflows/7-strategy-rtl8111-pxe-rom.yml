name: Realtek iPXE ROM

on:
  # 支持推送触发和手动触发
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      release:
        description: "创建 Release 发布 / Create Release"
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出构建仓库 / Checkout Builder Repository
        uses: actions/checkout@v4

      - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
        run: docker pull coreboot/coreboot-sdk:latest

      - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
        run: |
          echo "📥 克隆 MrChromebox coreboot"
          git clone https://github.com/MrChromebox/coreboot.git coreboot
          cd coreboot
          git submodule update --init --checkout --recursive

      - name: 配置网络支持 / Configure Network Support
        run: |
          echo "📝 追加 EDK2 网络支持配置"
          cd coreboot
          echo "" >> configs/cml/config.kaisa.uefi
          echo "# 网络支持配置" >> configs/cml/config.kaisa.uefi
          echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> configs/cml/config.kaisa.uefi
          echo "CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y" >> configs/cml/config.kaisa.uefi
          echo "CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y" >> configs/cml/config.kaisa.uefi
          echo "" >> configs/cml/config.kaisa.uefi
          echo "# Intel 芯片组系统稳定配置（适合 Kaisa 主板）" >> configs/cml/config.kaisa.uefi
          echo "CONFIG_SOC_INTEL_COMMON_BLOCK_POWER_LIMIT=y" >> configs/cml/config.kaisa.uefi
          echo "CONFIG_SOC_INTEL_COMMON_BLOCK_THERMAL=y" >> configs/cml/config.kaisa.uefi
          echo "CONFIG_SOUTHBRIDGE_INTEL_COMMON_WATCHDOG=y" >> configs/cml/config.kaisa.uefi
          echo "CONFIG_EC_GOOGLE_CHROMEEC_AUTO_FAN_CTRL=y" >> configs/cml/config.kaisa.uefi
          echo "" >> configs/cml/config.kaisa.uefi

      - name: 📦 编译 MrChromebox Coreboot 固件 / Build Coreboot
        run: |
          echo "🔨 编译 MrChromebox coreboot（kaisa 主板）"

          # 使用 MrChromebox 标准编译流程（参考 build-coreboot.yml）
          # 确保输出目录权限正确
          mkdir -p roms
          chmod 755 roms

          # 使用 MrChromebox 标准编译流程
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     # 使用 MrChromebox 编译脚本（配置已在配置文件中）
                     echo '🔧 使用 MrChromebox build-uefi.sh 编译 kaisa...' && \
                     ./build-uefi.sh kaisa && \
                     chmod 644 /home/coreboot/roms/*.rom && \
                     echo '✅ MrChromebox 编译完成'"

      - name: 验证编译结果 / Verify Build Results
        run: |
          echo "📦 验证编译结果"

          # 检查 ROM 文件
          ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            ls -la roms/
            exit 1
          fi

          echo "✅ 找到 ROM 文件: $(basename "$ROM_FILE")"
          ls -lh "$ROM_FILE"

          # 使用 coreboot-sdk 容器构建并调用 cbfstool 验证 PXE/iPXE 条目
          echo "📦 使用容器内 cbfstool 验证 ROM"
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     make -C util/cbfstool >/dev/null && \
                     util/cbfstool/cbfstool /home/coreboot/roms/$(basename \"$ROM_FILE\") print && \
                     echo '📦 验证 ROM 文件中是否包含 PXE 条目' && \
                     util/cbfstool/cbfstool /home/coreboot/roms/$(basename \"$ROM_FILE\") print | grep -i pxe"
          if [ $? -ne 0 ]; then
            echo "❌ 未找到 iPXE/PXE 条目"
            exit 1
          fi

      - name: 上传固件 / Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: coreboot-kaisa-rtl8111-pxerom-${{ github.run_number }}
          path: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md

      - name: 创建 Release / Create Release
        if: ${{ github.event.inputs.release == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: kaisa-rtl8111-pxerom-${{ github.run_number }}
          name: "Coreboot Kaisa - 方案7 (RTL8111 PXE ROM) #${{ github.run_number }}"
          body: |
            # 🎯 方案7：Realtek 8111 PXE ROM 集成

            已在编译前自动追加三项网络配置，确保在 UEFI Shell 可使用 ipxe.efi 正常进行网络引导：
            - CONFIG_EDK2_NETWORK_PXE_SUPPORT=y
            - CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y
            - CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y

            同时追加 Intel 芯片组稳定性相关配置（适配 Kaisa 主板）：
            - CONFIG_SOC_INTEL_COMMON_BLOCK_POWER_LIMIT=y
            - CONFIG_SOC_INTEL_COMMON_BLOCK_THERMAL=y
            - CONFIG_SOUTHBRIDGE_INTEL_COMMON_WATCHDOG=y
            - CONFIG_EC_GOOGLE_CHROMEEC_AUTO_FAN_CTRL=y

            **构建时间**: ${{ github.event.repository.updated_at }}
          files: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
