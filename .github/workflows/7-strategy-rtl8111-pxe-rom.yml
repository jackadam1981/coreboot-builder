name: 方案7 - Realtek 8111 PXE ROM 集成 / Strategy 7 - RTL8111 PXE ROM Integration

on:
  # 支持手动触发
  workflow_dispatch:
    inputs:
      release:
        description: "创建 Release 发布 / Create Release"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 显示方案信息 / Display Strategy Info
        run: |
          echo "=========================================="
          echo "🎯 方案7：Realtek 8111 PXE ROM 集成"
          echo "=========================================="
          echo ""
          echo "📝 方案说明："
          echo "  - 使用 MrChromebox 的 EDK2 作为主要 payload"
          echo "  - 集成 iPXE（内置 Realtek 驱动）作为 PCI Option ROM"
          echo "  - ⚠️  重要：RTL8111H 没有官方 PXE ROM"
          echo "  - 💡 替代方案：使用 iPXE 内置 Realtek 驱动"
          echo ""
          echo "🎯 预期结果："
          echo "  ✅ 硬件层面启用网络启动"
          echo "  ✅ BIOS/UEFI 自动识别网卡的 PXE 能力"
          echo "  ✅ 最简单、最可靠的集成方式"
          echo ""
          echo "📊 技术实现："
          echo "  1. 使用仓库中的 Realtek GBE PXE ROM Code 2.70"
          echo "  2. 编译 MrChromebox 固件（EDK2 payload）"
          echo "  3. 使用 cbfstool 添加作为 PCI Option ROM"
          echo "  4. PCI Vendor ID: 0x10ec, Device ID: 0x8168"
          echo ""
          echo "💡 技术优势："
          echo "  ⭐ 集成复杂度最低"
          echo "  ⭐ 官方 Realtek PXE ROM 支持"
          echo "  ⭐ 不依赖 EDK2 网络栈"
          echo "  ⭐ 启动速度快"
          echo "  ⭐ 仓库预置文件，无需下载"
          echo "=========================================="

      - name: 检出构建仓库 / Checkout Builder Repository
        uses: actions/checkout@v4

      - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
        run: docker pull coreboot/coreboot-sdk:latest

      - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
        run: |
          echo "📥 克隆 MrChromebox coreboot"
          git clone https://github.com/MrChromebox/coreboot.git coreboot
          cd coreboot
          git submodule update --init --checkout --recursive

      - name: 📦 提取 Realtek PXE ROM / Extract Realtek PXE ROM
        run: |
          echo "📦 提取 Realtek GBE PXE ROM Code 2.70"
          
          # 创建目录
          mkdir -p pxerom_files
          cd pxerom_files
          
          # 解压并提取 PXE ROM
          unzip -q ../RTEGPXE.270.zip
          # 尝试使用 .lom 文件（可能更适合 coreboot）
          cp BIN/rtegpxe.lom gbe_pxe_rom_2.70.rom
          
          echo "✅ PXE ROM 提取成功"
          echo "📊 文件大小：$(du -h gbe_pxe_rom_2.70.rom | cut -f1)"
          echo "🎯 PCI ID: 0x10ec:0x8168 (RTL8111H)"

      - name: 替换 Logo / Replace Logo
        run: |
          echo "🎨 替换 coreboot 启动 Logo"
          
          # 检查是否有自定义 Logo 文件
          if [ -f "coreboot_logo.bmp" ]; then
            echo "✅ 找到自定义 Logo 文件: coreboot_logo.bmp"
            echo "📊 Logo 文件大小: $(du -h coreboot_logo.bmp | cut -f1)"
            
            # 复制自定义 Logo 到 coreboot 源码目录
            sudo cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
            sudo chmod 644 coreboot/Documentation/coreboot_logo.bmp
            sudo chown runner:runner coreboot/Documentation/coreboot_logo.bmp
            
            echo "✅ 自定义 Logo 已替换到 coreboot 源码中"
            echo "📋 验证 Logo 文件:"
            ls -lh coreboot/Documentation/coreboot_logo.bmp
          else
            echo "⚠️ 未找到自定义 Logo 文件，使用默认 coreboot logo"
            echo "📋 可用的 Logo 文件:"
            ls -la *.bmp 2>/dev/null || echo "无 .bmp 文件"
          fi

      - name: 📦 编译 MrChromebox Coreboot 固件 / Build Coreboot
        run: |
          echo "🔨 编译 MrChromebox coreboot（kaisa 主板）"
          docker run --rm --user root \
            -v "$(pwd)/coreboot:/home/coreboot/coreboot" \
            -v "$(pwd)/roms:/home/coreboot/roms" \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     echo '🔧 使用 MrChromebox build-uefi.sh 编译 kaisa...' && \
                     ./build-uefi.sh kaisa && \
                     echo '📦 编译完成，查找输出文件...' && \
                     find ~/dev -name '*.rom' -type f 2>/dev/null | head -5 && \
                     find . -name '*.rom' -type f 2>/dev/null | head -5 && \
                     ROM_FILE=\$(find ~/dev -name '*.rom' -type f 2>/dev/null | head -1) && \
                     if [ -z \"\$ROM_FILE\" ]; then \
                       ROM_FILE=\$(find . -name '*.rom' -type f 2>/dev/null | head -1); \
                     fi && \
                     if [ -n \"\$ROM_FILE\" ]; then \
                       ROM_BASENAME=\"coreboot_edk2-kaisa-mrchromebox_\$(date +%Y%m%d).rom\" && \
                       cp \"\$ROM_FILE\" \"/home/coreboot/roms/\$ROM_BASENAME\" && \
                       chmod 644 /home/coreboot/roms/*.rom && \
                       echo \"✅ ROM 文件已复制: /home/coreboot/roms/\$ROM_BASENAME\"; \
                     else \
                       echo '❌ 未找到编译生成的 ROM 文件'; \
                       ls -la ~/dev/ 2>/dev/null || echo '⚠️ ~/dev 目录不存在'; \
                       exit 1; \
                     fi"

      - name: 🔧 集成 Realtek 8111 PXE ROM / Integrate RTL8111 PXE ROM
        run: |
          echo "🔧 将 Realtek 8111 PXE ROM 集成到固件中"
          
          # 查找生成的 ROM 文件
          ROM_FILE=$(ls roms/*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            echo "📋 检查 roms 目录内容："
            ls -la roms/ 2>/dev/null || echo "⚠️ roms 目录不存在"
            exit 1
          fi
          
          echo "✅ 找到 ROM 文件: $ROM_FILE"
          ROM_BASENAME=$(basename "$ROM_FILE")
          
          # 备份原始 ROM 文件（集成前）
          ORIGINAL_ROM_BASENAME="${ROM_BASENAME%.*}_original.rom"
          sudo cp "$ROM_FILE" "roms/$ORIGINAL_ROM_BASENAME"
          sudo chmod 644 "roms/$ORIGINAL_ROM_BASENAME"
          sudo chown runner:runner "roms/$ORIGINAL_ROM_BASENAME"
          echo "📋 原始 ROM 已备份为: $ORIGINAL_ROM_BASENAME"
          
          # 在 Docker 容器内执行 cbfstool 操作
          docker run --rm --user root \
            -v "$(pwd)/coreboot:/home/coreboot/coreboot" \
            -v "$(pwd)/roms:/home/coreboot/roms" \
            -v "$(pwd)/pxerom_files:/home/coreboot/pxerom_files" \
            -w /home/coreboot \
            coreboot/coreboot-sdk:latest \
            /bin/bash -c "
              echo '🔍 当前环境：'
              pwd
              ls -la roms/
              ls -la pxerom_files/
              
              echo ''
              echo '📋 ROM 文件信息（集成前）：'
              coreboot/build/cbfstool roms/$ROM_BASENAME print
              
              echo ''
              echo '🔧 添加 Realtek 网络启动支持作为 PCI Option ROM...'
              
              # 检查 PXE ROM 文件
              echo '📋 检查 PXE ROM 文件：'
              ls -la pxerom_files/
              file pxerom_files/gbe_pxe_rom_2.70.rom
              echo ''
              
              # RTL8111H PCI ID: Vendor=10ec, Device=8168
              # 命名格式: pci<vendor>,<device>.rom (coreboot 标准格式)
              
              # 尝试添加 GBE PXE ROM 作为 PCI Option ROM
              echo '🔧 尝试添加 PXE ROM（.lom 文件 + optionrom 类型）...'
              if coreboot/build/cbfstool roms/$ROM_BASENAME add \
                -f pxerom_files/gbe_pxe_rom_2.70.rom \
                -n pci10ec,8168.rom \
                -t optionrom; then
                echo '✅ GBE PXE ROM 集成成功（.lom + optionrom 类型）'
              else
                echo '❌ .lom + optionrom 失败，尝试 .nic + optionrom...'
                # 尝试使用 .nic 文件
                cp pxerom_files/BIN/rtegpxe.nic pxerom_files/gbe_pxe_rom_2.70.nic
                if coreboot/build/cbfstool roms/$ROM_BASENAME add \
                  -f pxerom_files/gbe_pxe_rom_2.70.nic \
                  -n pci10ec,8168.rom \
                  -t optionrom; then
                  echo '✅ GBE PXE ROM 集成成功（.nic + optionrom 类型）'
                else
                  echo '❌ optionrom 类型失败，尝试 raw 类型...'
                  # 尝试作为 raw 类型
                  if coreboot/build/cbfstool roms/$ROM_BASENAME add \
                    -f pxerom_files/gbe_pxe_rom_2.70.nic \
                    -n pci10ec,8168.rom \
                    -t raw; then
                    echo '✅ GBE PXE ROM 集成成功（.nic + raw 类型）'
                  else
                    echo '❌ 所有尝试都失败，检查文件格式和 CBFS 空间'
                    echo '📊 CBFS 空间使用情况：'
                    coreboot/build/cbfstool roms/$ROM_BASENAME print | grep -E '(Size|Comp|empty)'
                    echo '📋 尝试的文件：'
                    ls -la pxerom_files/
                    echo '📋 文件格式检查：'
                    file pxerom_files/gbe_pxe_rom_2.70.rom
                    file pxerom_files/gbe_pxe_rom_2.70.nic
                  fi
                fi
              fi
              
              # 重命名集成后的 ROM 文件
              INTEGRATED_ROM_BASENAME=\"${ROM_BASENAME%.*}_with_pxe_rom.rom\"
              mv roms/$ROM_BASENAME roms/\$INTEGRATED_ROM_BASENAME
              
              # 设置权限
              chmod 644 roms/\$INTEGRATED_ROM_BASENAME
              chown 1001:1001 roms/\$INTEGRATED_ROM_BASENAME
              
              echo \"✅ 集成后的 ROM 已重命名为: \$INTEGRATED_ROM_BASENAME\"
              
              echo ''
              echo '📋 ROM 文件信息（集成后）：'
              coreboot/build/cbfstool roms/\$INTEGRATED_ROM_BASENAME print
            "

      - name: 📦 验证集成结果 / Verify Integration
        run: |
          echo "📦 验证 Realtek 8111 PXE ROM 集成结果"
          
          # 查找集成后的 ROM 文件
          INTEGRATED_ROM_FILE=$(ls roms/*_with_pxe_rom.rom | head -1)
          ORIGINAL_ROM_FILE=$(ls roms/*_original.rom | head -1)
          
          if [ -z "$INTEGRATED_ROM_FILE" ]; then
            echo "❌ 未找到集成后的 ROM 文件"
            echo "📋 检查 roms 目录内容："
            ls -la roms/ 2>/dev/null || echo "⚠️ roms 目录不存在"
            exit 1
          fi
          
          echo "✅ 找到集成后的 ROM 文件: $(basename "$INTEGRATED_ROM_FILE")"
          if [ -n "$ORIGINAL_ROM_FILE" ]; then
            echo "✅ 找到原始 ROM 文件: $(basename "$ORIGINAL_ROM_FILE")"
          fi
          
          echo ""
          echo "📊 ROM 文件对比："
          ls -lh "$INTEGRATED_ROM_FILE"
          if [ -n "$ORIGINAL_ROM_FILE" ]; then
            ls -lh "$ORIGINAL_ROM_FILE"
          fi
          
          ROM_BASENAME=$(basename "$INTEGRATED_ROM_FILE")
          
          # 在 Docker 容器内验证
          docker run --rm --user root \
            -v "$(pwd)/coreboot:/home/coreboot/coreboot" \
            -v "$(pwd)/roms:/home/coreboot/roms" \
            -w /home/coreboot \
            coreboot/coreboot-sdk:latest \
            /bin/bash -c "
              echo '🔍 验证 PXE ROM 集成状态：'
              echo ''
              
              # 检查 PCI Option ROM
              if coreboot/build/cbfstool roms/$ROM_BASENAME print | grep -q 'pci10ec,8168.rom'; then
                echo '✅ Realtek 网络启动支持已成功集成到固件中'
                echo ''
                echo '📋 PCI Option ROM 详细信息：'
                coreboot/build/cbfstool roms/$ROM_BASENAME print | grep -A 3 'pci10ec,8168.rom'
                echo ''
                echo '🎯 集成成功！固件现在支持：'
                echo '  - RTL8111H 网卡网络启动'
                echo '  - PCI Option ROM 自动加载'
                echo '  - 兼容 RTL8168 系列 PXE ROM'
              else
                echo '❌ Realtek 网络启动支持未找到，可能集成失败'
                echo ''
                echo '📋 完整的 CBFS 内容：'
                coreboot/build/cbfstool roms/$ROM_BASENAME print
                exit 1
              fi
              
              echo ''
              echo '📊 CBFS 完整内容：'
              coreboot/build/cbfstool roms/$ROM_BASENAME print
            "
          
          # 生成校验和
          echo ""
          echo "🔐 生成固件校验和..."
          cd roms
          # 使用 sudo 删除旧的校验和文件
          sudo rm -f *.sha1 *.sha256 2>/dev/null || true
          
          # 为集成后的 ROM 生成校验和
          sudo bash -c "sha1sum '$(basename "$INTEGRATED_ROM_FILE")' > '$(basename "$INTEGRATED_ROM_FILE").sha1'"
          sudo bash -c "sha256sum '$(basename "$INTEGRATED_ROM_FILE")' > '$(basename "$INTEGRATED_ROM_FILE").sha256'"
          
          # 为原始 ROM 生成校验和（如果存在）
          if [ -n "$ORIGINAL_ROM_FILE" ]; then
            sudo bash -c "sha1sum '$(basename "$ORIGINAL_ROM_FILE")' > '$(basename "$ORIGINAL_ROM_FILE").sha1'"
            sudo bash -c "sha256sum '$(basename "$ORIGINAL_ROM_FILE")' > '$(basename "$ORIGINAL_ROM_FILE").sha256'"
          fi
          
          echo "✅ 校验和已生成"
          echo ""
          echo "📊 集成后的 ROM 校验和："
          cat "$(basename "$INTEGRATED_ROM_FILE").sha1"
          cat "$(basename "$INTEGRATED_ROM_FILE").sha256"
          
          if [ -n "$ORIGINAL_ROM_FILE" ]; then
            echo ""
            echo "📊 原始 ROM 校验和："
            cat "$(basename "$ORIGINAL_ROM_FILE").sha1"
            cat "$(basename "$ORIGINAL_ROM_FILE").sha256"
          fi
          cd ..

      - name: 📝 生成集成报告 / Generate Integration Report
        run: |
          echo "📝 生成方案7集成报告"
          
          INTEGRATED_ROM_FILE=$(ls roms/*_with_pxe_rom.rom | head -1)
          ORIGINAL_ROM_FILE=$(ls roms/*_original.rom | head -1)
          INTEGRATED_ROM_NAME=$(basename "$INTEGRATED_ROM_FILE")
          ORIGINAL_ROM_NAME=$(basename "$ORIGINAL_ROM_FILE" 2>/dev/null || echo "未找到")
          
          cat > integration_report.md << EOF
          # 方案7 - Realtek 8111 PXE ROM 集成报告
          
          ## 📋 构建信息
          
          - **构建日期**: $(date '+%Y-%m-%d %H:%M:%S')
          - **集成后固件**: $INTEGRATED_ROM_NAME
          - **集成后大小**: $(du -h "$INTEGRATED_ROM_FILE" | cut -f1)
          - **原始固件**: $ORIGINAL_ROM_NAME
          - **原始大小**: $(du -h "$ORIGINAL_ROM_FILE" | cut -f1 2>/dev/null || echo "未找到")
          - **方案类型**: Realtek 8111 PXE ROM 集成
          
          ## 🎯 方案说明
          
          ### 技术实现
          - 使用 MrChromebox 的 EDK2 作为主要 payload
          - 集成 Realtek 8111 官方 PXE ROM 作为 PCI Option ROM
          - PCI Vendor ID: 0x10ec, Device ID: 0x8168
          - PCI Option ROM 命名: pci10ec,8168.rom
          
          ### 预期功能
          - ✅ 硬件层面启用网络启动
          - ✅ BIOS/UEFI 自动识别网卡的 PXE 能力
          - ✅ 无需额外驱动或配置
          
          ## 📊 集成状态
          
          ### PXE ROM 集成
          - PXE ROM 文件: rtl8111_ipxe.efi
          - CBFS 路径: pci10ec,8168.rom
          - 类型: PCI Option ROM
          
          ### 验证结果
          \`\`\`
          $(docker run --rm -v "$(pwd)/coreboot:/home/coreboot/coreboot" -w /home/coreboot coreboot/coreboot-sdk:latest /bin/bash -c "coreboot/build/cbfstool roms/$INTEGRATED_ROM_NAME print | grep -A 3 'pci10ec,8168.rom' || echo 'PXE ROM 未找到'")
          \`\`\`
          
          ## 🔐 校验和
          
          ### 集成后固件
          **SHA1**:
          \`\`\`
          $(cat "$INTEGRATED_ROM_FILE.sha1" 2>/dev/null || echo "未生成")
          \`\`\`
          
          **SHA256**:
          \`\`\`
          $(cat "$INTEGRATED_ROM_FILE.sha256" 2>/dev/null || echo "未生成")
          \`\`\`
          
          ### 原始固件
          **SHA1**:
          \`\`\`
          $(cat "$ORIGINAL_ROM_FILE.sha1" 2>/dev/null || echo "未生成")
          \`\`\`
          
          **SHA256**:
          \`\`\`
          $(cat "$ORIGINAL_ROM_FILE.sha256" 2>/dev/null || echo "未生成")
          \`\`\`
          
          ## 📝 使用说明
          
          ### 刷写固件
          1. 下载固件文件和校验和文件
          2. 验证校验和确保文件完整性
          3. 使用 flashrom 刷写固件
          
          ### 启动测试和配置
          1. 刷写固件后重启设备
          2. 进入 BIOS/UEFI 设置
          3. **重要：配置网络启动选项**
             - 启用 PXE Boot
             - 启用 Network Boot
             - 启用 Legacy Boot（PCI Option ROM 需要）
          4. 设置启动顺序，添加网络启动
          5. 测试 PXE 网络启动功能
          
          ### 🔧 PXE 启动菜单不显示的解决方案
          
          **如果启动菜单中没有 PXE 选项，请检查以下设置：**
          
          #### A. BIOS/UEFI 网络设置
          - ✅ **PXE Boot** - 必须启用
          - ✅ **Network Boot** - 必须启用
          - ✅ **Legacy Boot** - 建议启用（PCI Option ROM 通常使用 Legacy 模式）
          
          #### B. 启动模式设置
          - 🔄 **Boot Mode** - 设置为 Legacy 或 UEFI + Legacy 混合模式
          - 🔄 **CSM (Compatibility Support Module)** - 如果可用，建议启用
          
          #### C. 网络启动顺序
          - 📋 **Boot Priority** - 将网络启动添加到启动顺序列表
          - 📋 **Boot Override** - 检查是否有网络启动选项
          
          #### D. 高级设置
          - ⚙️ **PCI ROM Execution** - 确保启用（允许 PCI Option ROM 执行）
          - ⚙️ **Option ROM Loading** - 确保启用
          
          **注意：** PCI Option ROM 通常在 Legacy 模式下工作，如果系统设置为纯 UEFI 模式，可能不会显示 PXE 启动选项。
          
          ## 💡 技术优势
          
          - ⭐ **最简单的集成方式** - 只需添加 PCI Option ROM
          - ⭐ **官方支持** - 使用 Realtek 或 iPXE 官方驱动
          - ⭐ **硬件原生** - 不依赖 payload 网络栈
          - ⭐ **高兼容性** - 自动识别网卡并启用 PXE
          
          ## 📊 方案对比
          
          | 特性 | 方案7 (PXE ROM) | 方案1 (iPXE) | 方案2 (iPXE Payload) |
          |------|----------------|--------------|---------------------|
          | 集成复杂度 | ⭐ 最简单 | ⭐⭐⭐ 中等 | ⭐⭐⭐⭐ 复杂 |
          | 官方支持 | ✅ Realtek/iPXE 官方 | ❌ 社区 | ❌ 社区 |
          | 网络兼容性 | ✅ 硬件原生 | ⚠️ 依赖驱动 | ✅ iPXE 驱动 |
          | 启动速度 | ⭐⭐⭐ 快 | ⭐⭐ 一般 | ⭐⭐ 一般 |
          | 功能丰富性 | ⭐⭐ 基础 PXE | ⭐⭐⭐⭐⭐ 高级功能 | ⭐⭐⭐⭐⭐ 高级功能 |
          
          ## 🔄 后续改进
          
          - [ ] 测试实际网络启动功能
          - [ ] 验证 WDS 服务器连接
          - [ ] 测试不同网络环境
          - [ ] 对比其他方案的性能
          
          ---
          
          **构建时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          EOF
          
          echo "✅ 集成报告已生成"
          cat integration_report.md

      - name: 上传固件 / Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: coreboot-kaisa-rtl8111-pxerom-${{ github.run_number }}
          path: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md

      - name: 创建 Release / Create Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: kaisa-rtl8111-pxerom-${{ github.run_number }}
          name: "Coreboot Kaisa - 方案7 (RTL8111 PXE ROM) #${{ github.run_number }}"
          body: |
            # 🎯 方案7：Realtek 8111 PXE ROM 集成
            
            ## 📋 方案说明
            
            - **集成方式**: Realtek 8111 PXE ROM 作为 PCI Option ROM
            - **主板**: Acer Chromebox CXI4 (kaisa)
            - **网卡**: Realtek RTL8111H (PCI ID: 10ec:8168)
            - **Payload**: MrChromebox EDK2
            
            ## 💡 技术优势
            
            - ⭐ **最简单的集成方式** - 只需添加 PCI Option ROM
            - ⭐ **官方支持** - 使用 Realtek 或 iPXE 官方驱动
            - ⭐ **硬件原生** - 不依赖 payload 网络栈
            - ⭐ **高兼容性** - 自动识别网卡并启用 PXE
            
            ## 🔐 文件校验
            
            请下载后验证 SHA1/SHA256 校验和确保文件完整性。
            
            ## 📝 使用说明
            
            1. 下载固件文件
            2. 验证校验和
            3. 使用 flashrom 刷写固件
            4. 重启后进入 BIOS/UEFI 设置
            5. **重要：启用网络启动选项**
               - 启用 PXE Boot
               - 启用 Network Boot  
               - 启用 Legacy Boot（PCI Option ROM 需要）
               - 设置启动模式为 Legacy 或混合模式
            6. 测试 PXE 网络启动功能
            
            ## 🔧 故障排除
            
            **如果启动菜单中没有 PXE 选项：**
            - 检查 BIOS/UEFI 是否启用了 PXE Boot
            - 确认启动模式设置为 Legacy 或混合模式
            - 验证 PCI ROM Execution 已启用
            - 检查网络启动是否在启动顺序中
            
            ## ⚠️ 注意事项
            
            - 刷写固件前请备份原有固件
            - 确保电源稳定，刷写过程中不要断电
            - 建议先在测试设备上验证
            
            **构建时间**: ${{ github.event.repository.updated_at }}
          files: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


