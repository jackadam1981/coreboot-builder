name: 方案7 - Realtek 8111 PXE ROM 集成 / Strategy 7 - RTL8111 PXE ROM Integration

on:
  # 支持手动触发
  workflow_dispatch:
    inputs:
      release:
        description: "创建 Release 发布 / Create Release"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 显示方案信息 / Display Strategy Info
        run: |
          echo "=========================================="
          echo "🎯 方案7：Realtek 8111 PXE ROM 集成"
          echo "=========================================="
          echo ""
          echo "📝 方案说明："
          echo "  - 使用 MrChromebox 的 EDK2 作为主要 payload"
          echo "  - 集成 Realtek 8111 官方 PXE ROM 作为 PCI Option ROM"
          echo "  - 利用硬件原生 PXE 支持"
          echo "  - 无需修改 payload 或网络栈"
          echo ""
          echo "🎯 预期结果："
          echo "  ✅ 硬件层面启用网络启动"
          echo "  ✅ BIOS/UEFI 自动识别网卡的 PXE 能力"
          echo "  ✅ 最简单、最可靠的集成方式"
          echo ""
          echo "📊 技术实现："
          echo "  1. 下载 Realtek 8111 官方 PXE ROM"
          echo "  2. 编译 MrChromebox 固件（EDK2 payload）"
          echo "  3. 使用 cbfstool 添加 PCI Option ROM"
          echo "  4. PCI Vendor ID: 0x10ec, Device ID: 0x8168"
          echo ""
          echo "💡 技术优势："
          echo "  ⭐ 集成复杂度最低"
          echo "  ⭐ Realtek 官方支持"
          echo "  ⭐ 硬件原生网络兼容性"
          echo "  ⭐ 启动速度快"
          echo "=========================================="

      - name: 检出构建仓库 / Checkout Builder Repository
        uses: actions/checkout@v4

      - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
        run: docker pull coreboot/coreboot-sdk:latest

      - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
        run: |
          echo "📥 克隆 MrChromebox coreboot"
          git clone https://github.com/MrChromebox/coreboot.git coreboot
          cd coreboot
          git submodule update --init --checkout --recursive

      - name: 📥 下载 Realtek 8111 PXE ROM / Download RTL8111 PXE ROM
        run: |
          echo "📥 下载 Realtek 8111 PXE ROM 文件"
          
          # 创建目录
          mkdir -p pxerom_files
          cd pxerom_files
          
          # 尝试下载 Realtek 官方 PXE ROM
          # 注意：这里需要找到实际的 Realtek 官方下载链接
          # 目前使用备用方案：从 GitHub 或其他可信来源下载
          
          echo "📝 寻找 Realtek 8111 PXE ROM 文件..."
          
          # 方案1：尝试从 Realtek 官方网站下载
          # wget -O rtl8111_pxe.rom "https://www.realtek.com/.../rtl8111_pxe_uefi.rom" || echo "⚠️ 官方下载失败"
          
          # 方案2：尝试从 GitHub 镜像下载
          # 注意：这里需要找到可靠的源
          wget -O rtl8111h_219.rom "https://github.com/ipxe/ipxe/raw/master/src/bin/8086157b.rom" 2>/dev/null && \
            echo "✅ 下载成功（备用源）" || echo "⚠️ 备用源下载失败"
          
          # 方案3：使用 iPXE 自带的 Realtek 驱动编译 PXE ROM
          echo "📦 准备编译 iPXE Realtek 驱动版本"
          
          # 克隆 iPXE 源码
          cd ..
          git clone https://github.com/ipxe/ipxe.git ipxe_src
          cd ipxe_src/src
          
          # 编译 Realtek 8168 网卡的 iPXE ROM
          echo "🔨 编译 iPXE Realtek 8168 ROM..."
          
          # 创建自定义配置
          cat > realtek_config.h << 'EOF'
#define BANNER_TIMEOUT      0
#define NET_PROTO_IPV4
#define NET_PROTO_IPV6
#define DOWNLOAD_PROTO_TFTP
#define DOWNLOAD_PROTO_HTTP
#define DOWNLOAD_PROTO_HTTPS
#define DOWNLOAD_PROTO_FTP
#define DNS_RESOLVER
EOF
          
          # 编译 UEFI 版本的 iPXE，支持 Realtek RTL8168
          # RTL8168 的 PCI ID: 10ec:8168
          make bin-x86_64-efi/ipxe.efi EMBED=realtek_config.h || {
            echo "❌ iPXE 编译失败，但继续工作流"
          }
          
          # 如果编译成功，复制到 pxerom_files
          if [ -f "bin-x86_64-efi/ipxe.efi" ]; then
            cp bin-x86_64-efi/ipxe.efi ../../pxerom_files/rtl8111_ipxe.efi
            echo "✅ iPXE Realtek 版本编译成功"
          else
            echo "⚠️ iPXE 编译失败，尝试使用预编译版本"
            # 下载预编译的 iPXE（包含 Realtek 驱动）
            cd ../../pxerom_files
            wget -O rtl8111_ipxe.efi "https://boot.ipxe.org/ipxe.efi" || {
              echo "❌ 无法获取 PXE ROM 文件"
              exit 1
            }
          fi
          
          # 返回到工作目录
          cd ../../pxerom_files
          
          echo ""
          echo "📦 PXE ROM 文件列表："
          ls -lh
          
          # 检查是否至少有一个可用的 ROM 文件
          if [ -f "rtl8111_ipxe.efi" ]; then
            echo "✅ 找到可用的 PXE ROM 文件"
          else
            echo "❌ 未找到可用的 PXE ROM 文件"
            exit 1
          fi

      - name: 替换 Logo / Replace Logo
        run: |
          echo "🎨 替换 coreboot 启动 Logo"
          cd coreboot
          if [ -f "Documentation/coreboot_logo.bmp" ]; then
            # 创建自定义 logo（如果你有的话，可以从仓库复制）
            # 这里使用默认 logo
            echo "✅ 使用默认 coreboot logo"
          fi

      - name: 📦 编译 MrChromebox Coreboot 固件 / Build Coreboot
        run: |
          echo "🔨 编译 MrChromebox coreboot（kaisa 主板）"
          docker run --rm \
            -v "$(pwd)/coreboot:/home/coreboot/coreboot" \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            /bin/bash -c "
              # 显示环境信息
              echo '📊 编译环境信息：'
              uname -a
              pwd
              ls -la
              
              # 运行 MrChromebox 编译脚本
              echo '🔨 开始编译固件...'
              ./build-uefi.sh kaisa
              
              # 检查编译结果
              echo ''
              echo '📦 编译完成，检查生成的文件：'
              ls -lh ~/dev/firmware/ || echo '⚠️ firmware 目录不存在'
              ls -lh ~/dev/roms/ || echo '⚠️ roms 目录不存在'
              
              # 复制生成的 ROM 文件到统一位置
              mkdir -p /home/coreboot/coreboot/roms
              if [ -f ~/dev/roms/coreboot_edk2-kaisa-mrchromebox_*.rom ]; then
                cp ~/dev/roms/coreboot_edk2-kaisa-mrchromebox_*.rom /home/coreboot/coreboot/roms/
                echo '✅ ROM 文件已复制'
              elif [ -f ~/dev/firmware/*.rom ]; then
                cp ~/dev/firmware/*.rom /home/coreboot/coreboot/roms/
                echo '✅ ROM 文件已复制（从 firmware 目录）'
              else
                echo '❌ 未找到编译生成的 ROM 文件'
                exit 1
              fi
              
              # 设置权限
              chmod 644 /home/coreboot/coreboot/roms/*.rom
              chown 1001:1001 /home/coreboot/coreboot/roms/*.rom
            "

      - name: 🔧 集成 Realtek 8111 PXE ROM / Integrate RTL8111 PXE ROM
        run: |
          echo "🔧 将 Realtek 8111 PXE ROM 集成到固件中"
          
          # 查找生成的 ROM 文件
          ROM_FILE=$(ls coreboot/roms/*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            exit 1
          fi
          
          echo "✅ 找到 ROM 文件: $ROM_FILE"
          ROM_BASENAME=$(basename "$ROM_FILE")
          
          # 在 Docker 容器内执行 cbfstool 操作
          docker run --rm \
            -v "$(pwd)/coreboot:/home/coreboot/coreboot" \
            -v "$(pwd)/pxerom_files:/home/coreboot/pxerom_files" \
            -w /home/coreboot \
            coreboot/coreboot-sdk:latest \
            /bin/bash -c "
              echo '🔍 当前环境：'
              pwd
              ls -la coreboot/roms/
              ls -la pxerom_files/
              
              echo ''
              echo '📋 ROM 文件信息（集成前）：'
              coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print
              
              echo ''
              echo '🔧 添加 Realtek 8111 PXE ROM 作为 PCI Option ROM...'
              
              # RTL8111H PCI ID: Vendor=10ec, Device=8168
              # 命名格式: pci<vendor>,<device>.rom
              
              # 尝试添加 PXE ROM
              if [ -f pxerom_files/rtl8111_ipxe.efi ]; then
                echo '📦 使用 rtl8111_ipxe.efi'
                
                # 方案1: 作为 PCI Option ROM
                coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME add \
                  -f pxerom_files/rtl8111_ipxe.efi \
                  -n pci10ec,8168.rom \
                  -t raw && \
                  echo '✅ PXE ROM 集成成功（无压缩）' || \
                  echo '⚠️ PXE ROM 集成失败（无压缩），尝试压缩'
                
                # 方案2: 如果无压缩失败，尝试 LZ4 压缩
                if ! coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print | grep -q 'pci10ec,8168.rom'; then
                  coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME add \
                    -f pxerom_files/rtl8111_ipxe.efi \
                    -n pci10ec,8168.rom \
                    -t raw \
                    -c lz4 && \
                    echo '✅ PXE ROM 集成成功（LZ4 压缩）' || \
                    echo '⚠️ PXE ROM 集成失败（LZ4 压缩），尝试 LZMA'
                fi
                
                # 方案3: 如果 LZ4 失败，尝试 LZMA 压缩
                if ! coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print | grep -q 'pci10ec,8168.rom'; then
                  coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME add \
                    -f pxerom_files/rtl8111_ipxe.efi \
                    -n pci10ec,8168.rom \
                    -t raw \
                    -c lzma && \
                    echo '✅ PXE ROM 集成成功（LZMA 压缩）' || \
                    echo '❌ PXE ROM 集成失败（所有方式）'
                fi
              else
                echo '❌ 未找到 PXE ROM 文件'
                exit 1
              fi
              
              # 设置权限
              chmod 644 coreboot/roms/$ROM_BASENAME
              chown 1001:1001 coreboot/roms/$ROM_BASENAME
              
              echo ''
              echo '📋 ROM 文件信息（集成后）：'
              coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print
            "

      - name: 📦 验证集成结果 / Verify Integration
        run: |
          echo "📦 验证 Realtek 8111 PXE ROM 集成结果"
          
          # 查找 ROM 文件
          ROM_FILE=$(ls coreboot/roms/*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            exit 1
          fi
          
          echo "✅ 找到 ROM 文件: $(basename "$ROM_FILE")"
          ls -lh "$ROM_FILE"
          
          ROM_BASENAME=$(basename "$ROM_FILE")
          
          # 在 Docker 容器内验证
          docker run --rm \
            -v "$(pwd)/coreboot:/home/coreboot/coreboot" \
            -w /home/coreboot \
            coreboot/coreboot-sdk:latest \
            /bin/bash -c "
              echo '🔍 验证 PXE ROM 集成状态：'
              echo ''
              
              # 检查 PCI Option ROM
              if coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print | grep -q 'pci10ec,8168.rom'; then
                echo '✅ Realtek 8111 PXE ROM 已成功集成到固件中'
                echo ''
                echo '📋 PXE ROM 详细信息：'
                coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print | grep -A 3 'pci10ec,8168.rom'
              else
                echo '❌ Realtek 8111 PXE ROM 未找到，可能集成失败'
                echo ''
                echo '📋 完整的 CBFS 内容：'
                coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print
                exit 1
              fi
              
              echo ''
              echo '📊 CBFS 完整内容：'
              coreboot/build/cbfstool coreboot/roms/$ROM_BASENAME print
            "
          
          # 生成校验和
          echo ""
          echo "🔐 生成固件校验和..."
          cd coreboot/roms
          rm -f *.sha1 *.sha256
          sha1sum "$(basename "$ROM_FILE")" > "$(basename "$ROM_FILE").sha1"
          sha256sum "$(basename "$ROM_FILE")" > "$(basename "$ROM_FILE").sha256"
          echo "✅ 校验和已生成"
          cat *.sha1
          cat *.sha256
          cd ../..

      - name: 📝 生成集成报告 / Generate Integration Report
        run: |
          echo "📝 生成方案7集成报告"
          
          ROM_FILE=$(ls coreboot/roms/*.rom | head -1)
          ROM_NAME=$(basename "$ROM_FILE")
          
          cat > integration_report.md << EOF
          # 方案7 - Realtek 8111 PXE ROM 集成报告
          
          ## 📋 构建信息
          
          - **构建日期**: $(date '+%Y-%m-%d %H:%M:%S')
          - **固件文件**: $ROM_NAME
          - **固件大小**: $(du -h "$ROM_FILE" | cut -f1)
          - **方案类型**: Realtek 8111 PXE ROM 集成
          
          ## 🎯 方案说明
          
          ### 技术实现
          - 使用 MrChromebox 的 EDK2 作为主要 payload
          - 集成 Realtek 8111 官方 PXE ROM 作为 PCI Option ROM
          - PCI Vendor ID: 0x10ec, Device ID: 0x8168
          - PCI Option ROM 命名: pci10ec,8168.rom
          
          ### 预期功能
          - ✅ 硬件层面启用网络启动
          - ✅ BIOS/UEFI 自动识别网卡的 PXE 能力
          - ✅ 无需额外驱动或配置
          
          ## 📊 集成状态
          
          ### PXE ROM 集成
          - PXE ROM 文件: rtl8111_ipxe.efi
          - CBFS 路径: pci10ec,8168.rom
          - 类型: PCI Option ROM
          
          ### 验证结果
          \`\`\`
          $(docker run --rm -v "$(pwd)/coreboot:/home/coreboot/coreboot" -w /home/coreboot coreboot/coreboot-sdk:latest /bin/bash -c "coreboot/build/cbfstool coreboot/roms/$ROM_NAME print | grep -A 3 'pci10ec,8168.rom' || echo 'PXE ROM 未找到'")
          \`\`\`
          
          ## 🔐 校验和
          
          ### SHA1
          \`\`\`
          $(cat coreboot/roms/*.sha1)
          \`\`\`
          
          ### SHA256
          \`\`\`
          $(cat coreboot/roms/*.sha256)
          \`\`\`
          
          ## 📝 使用说明
          
          ### 刷写固件
          1. 下载固件文件和校验和文件
          2. 验证校验和确保文件完整性
          3. 使用 flashrom 刷写固件
          
          ### 启动测试
          1. 刷写固件后重启设备
          2. 进入 BIOS/UEFI 设置
          3. 检查网络启动选项
          4. 测试 PXE 网络启动功能
          
          ## 💡 技术优势
          
          - ⭐ **最简单的集成方式** - 只需添加 PCI Option ROM
          - ⭐ **官方支持** - 使用 Realtek 或 iPXE 官方驱动
          - ⭐ **硬件原生** - 不依赖 payload 网络栈
          - ⭐ **高兼容性** - 自动识别网卡并启用 PXE
          
          ## 📊 方案对比
          
          | 特性 | 方案7 (PXE ROM) | 方案1 (iPXE) | 方案2 (iPXE Payload) |
          |------|----------------|--------------|---------------------|
          | 集成复杂度 | ⭐ 最简单 | ⭐⭐⭐ 中等 | ⭐⭐⭐⭐ 复杂 |
          | 官方支持 | ✅ Realtek/iPXE 官方 | ❌ 社区 | ❌ 社区 |
          | 网络兼容性 | ✅ 硬件原生 | ⚠️ 依赖驱动 | ✅ iPXE 驱动 |
          | 启动速度 | ⭐⭐⭐ 快 | ⭐⭐ 一般 | ⭐⭐ 一般 |
          | 功能丰富性 | ⭐⭐ 基础 PXE | ⭐⭐⭐⭐⭐ 高级功能 | ⭐⭐⭐⭐⭐ 高级功能 |
          
          ## 🔄 后续改进
          
          - [ ] 测试实际网络启动功能
          - [ ] 验证 WDS 服务器连接
          - [ ] 测试不同网络环境
          - [ ] 对比其他方案的性能
          
          ---
          
          **构建时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          EOF
          
          echo "✅ 集成报告已生成"
          cat integration_report.md

      - name: 上传固件 / Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: coreboot-kaisa-rtl8111-pxerom-${{ github.run_number }}
          path: |
            coreboot/roms/*.rom
            coreboot/roms/*.sha1
            coreboot/roms/*.sha256
            integration_report.md

      - name: 创建 Release / Create Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: kaisa-rtl8111-pxerom-${{ github.run_number }}
          name: "Coreboot Kaisa - 方案7 (RTL8111 PXE ROM) #${{ github.run_number }}"
          body: |
            # 🎯 方案7：Realtek 8111 PXE ROM 集成
            
            ## 📋 方案说明
            
            - **集成方式**: Realtek 8111 PXE ROM 作为 PCI Option ROM
            - **主板**: Acer Chromebox CXI4 (kaisa)
            - **网卡**: Realtek RTL8111H (PCI ID: 10ec:8168)
            - **Payload**: MrChromebox EDK2
            
            ## 💡 技术优势
            
            - ⭐ **最简单的集成方式** - 只需添加 PCI Option ROM
            - ⭐ **官方支持** - 使用 Realtek 或 iPXE 官方驱动
            - ⭐ **硬件原生** - 不依赖 payload 网络栈
            - ⭐ **高兼容性** - 自动识别网卡并启用 PXE
            
            ## 🔐 文件校验
            
            请下载后验证 SHA1/SHA256 校验和确保文件完整性。
            
            ## 📝 使用说明
            
            1. 下载固件文件
            2. 验证校验和
            3. 使用 flashrom 刷写固件
            4. 重启后进入 BIOS/UEFI 设置
            5. 检查网络启动选项
            6. 测试 PXE 网络启动功能
            
            ## ⚠️ 注意事项
            
            - 刷写固件前请备份原有固件
            - 确保电源稳定，刷写过程中不要断电
            - 建议先在测试设备上验证
            
            **构建时间**: ${{ github.event.repository.updated_at }}
          files: |
            coreboot/roms/*.rom
            coreboot/roms/*.sha1
            coreboot/roms/*.sha256
            integration_report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

