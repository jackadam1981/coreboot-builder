name: 方案7 - Realtek 8111 PXE ROM 集成 / Strategy 7 - RTL8111 PXE ROM Integration

on:
  # 支持手动触发
  workflow_dispatch:
    inputs:
      release:
        description: "创建 Release 发布 / Create Release"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 显示方案信息 / Display Strategy Info
        run: |
          echo "=========================================="
          echo "🎯 方案7：Realtek 8111 PXE ROM 集成"
          echo "=========================================="
          echo ""
          echo "📝 方案说明："
          echo "  - 使用 MrChromebox 的 EDK2 作为主要 payload"
          echo "  - 集成 iPXE（内置 Realtek 驱动）作为 PCI Option ROM"
          echo "  - ⚠️  重要：RTL8111H 没有官方 PXE ROM"
          echo "  - 💡 替代方案：使用 iPXE 内置 Realtek 驱动"
          echo ""
          echo "🎯 预期结果："
          echo "  ✅ 硬件层面启用网络启动"
          echo "  ✅ BIOS/UEFI 自动识别网卡的 PXE 能力"
          echo "  ✅ 最简单、最可靠的集成方式"
          echo ""
          echo "📊 技术实现："
          echo "  1. 使用仓库中的 Realtek GBE PXE ROM Code 2.70"
          echo "  2. 编译 MrChromebox 固件（EDK2 payload）"
          echo "  3. 使用 cbfstool 添加作为 PCI Option ROM"
          echo "  4. PCI Vendor ID: 0x10ec, Device ID: 0x8168"
          echo ""
          echo "💡 技术优势："
          echo "  ⭐ 集成复杂度最低"
          echo "  ⭐ 官方 Realtek PXE ROM 支持"
          echo "  ⭐ 不依赖 EDK2 网络栈"
          echo "  ⭐ 启动速度快"
          echo "  ⭐ 仓库预置文件，无需下载"
          echo "=========================================="

      - name: 检出构建仓库 / Checkout Builder Repository
        uses: actions/checkout@v4

      - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
        run: docker pull coreboot/coreboot-sdk:latest

      - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
        run: |
          echo "📥 克隆 MrChromebox coreboot"
          git clone https://github.com/MrChromebox/coreboot.git coreboot
          cd coreboot
          git submodule update --init --checkout --recursive

      - name: 📦 提取 Realtek PXE ROM / Extract Realtek PXE ROM
        run: |
          echo "📦 提取 Realtek GBE PXE ROM Code 2.70"
          
          # 创建目录
          mkdir -p pxerom_files
          cd pxerom_files
          
          # 解压并提取 PXE ROM
          unzip -q ../RTEGPXE.270.zip
          # 尝试使用 .lom 文件（可能更适合 coreboot）
          cp BIN/rtegpxe.lom gbe_pxe_rom_2.70.rom
          
          echo "✅ PXE ROM 提取成功"
          echo "📊 文件大小：$(du -h gbe_pxe_rom_2.70.rom | cut -f1)"
          echo "🎯 PCI ID: 0x10ec:0x8168 (RTL8111H)"

      - name: 🔧 集成 PXE ROM 到源码 / Integrate PXE ROM into Source
        run: |
          echo "🔧 将 PXE ROM 集成到 coreboot 源码中"
          
          # 创建 3rdparty/blobs 目录结构
          mkdir -p coreboot/3rdparty/blobs/mainboard/google/puff/puff
          
          # 复制 PXE ROM 文件到正确位置
          cp pxerom_files/gbe_pxe_rom_2.70.rom coreboot/3rdparty/blobs/mainboard/google/puff/puff/pci10ec,8168.rom
          
          echo "✅ PXE ROM 已复制到源码目录"
          echo "📁 文件位置：coreboot/3rdparty/blobs/mainboard/google/puff/puff/pci10ec,8168.rom"
          echo "📊 文件大小：$(du -h coreboot/3rdparty/blobs/mainboard/google/puff/puff/pci10ec,8168.rom | cut -f1)"

      - name: 配置 PXE ROM 支持 / Configure PXE ROM Support
        run: |
          echo "📝 配置 MrChromebox PXE ROM 支持"
          cd coreboot

          # 检查配置文件并添加 PXE ROM 支持配置
          echo "✅ 找到 MrChromebox 配置文件"
          echo "📋 当前配置："
          cat configs/cml/config.kaisa.uefi
          
          # 检查是否已包含 PXE ROM 配置
          if grep -q "CONFIG_EDK2_LOAD_OPTION_ROMS=y" configs/cml/config.kaisa.uefi; then
            echo "✅ PXE ROM 支持配置已存在"
          else
            echo "📝 添加 PXE ROM 支持配置"
            echo "" >> configs/cml/config.kaisa.uefi
            echo "# PXE ROM 支持配置" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_EDK2_LOAD_OPTION_ROMS=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_PXE=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_PXE_ROM_FILE=\"pci10ec,8168.rom\"" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_COMPRESSED_PAYLOAD_NONE=y" >> configs/cml/config.kaisa.uefi
            echo "" >> configs/cml/config.kaisa.uefi
            echo "# Intel 芯片组系统稳定配置（适合 Kaisa 主板）" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_SOC_INTEL_COMMON_BLOCK_POWER_LIMIT=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_SOC_INTEL_COMMON_BLOCK_THERMAL=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_SOUTHBRIDGE_INTEL_COMMON_WATCHDOG=y" >> configs/cml/config.kaisa.uefi
            echo "CONFIG_EC_GOOGLE_CHROMEEC_AUTO_FAN_CTRL=y" >> configs/cml/config.kaisa.uefi
            echo "" >> configs/cml/config.kaisa.uefi
            echo "# 注意：PXE ROM 配置用于 Realtek RTL8111H 网络启动支持" >> configs/cml/config.kaisa.uefi
            echo "✅ PXE ROM 支持和 Intel 系统稳定配置已添加"
          fi
          
          echo ""
          echo "📋 更新后的配置："
          cat configs/cml/config.kaisa.uefi

      - name: 替换 Logo / Replace Logo
        run: |
          echo "🎨 替换 coreboot 启动 Logo"
          
          # 检查是否有自定义 Logo 文件
          if [ -f "coreboot_logo.bmp" ]; then
            echo "✅ 找到自定义 Logo 文件: coreboot_logo.bmp"
            echo "📊 Logo 文件大小: $(du -h coreboot_logo.bmp | cut -f1)"
            
            # 复制自定义 Logo 到 coreboot 源码目录
            sudo cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
            sudo chmod 644 coreboot/Documentation/coreboot_logo.bmp
            sudo chown runner:runner coreboot/Documentation/coreboot_logo.bmp
            
            echo "✅ 自定义 Logo 已替换到 coreboot 源码中"
            echo "📋 验证 Logo 文件:"
            ls -lh coreboot/Documentation/coreboot_logo.bmp
          else
            echo "⚠️ 未找到自定义 Logo 文件，使用默认 coreboot logo"
            echo "📋 可用的 Logo 文件:"
            ls -la *.bmp 2>/dev/null || echo "无 .bmp 文件"
          fi

      - name: 📦 编译 MrChromebox Coreboot 固件 / Build Coreboot
        run: |
          echo "🔨 编译 MrChromebox coreboot（kaisa 主板）"
          
          # 创建输出目录
          mkdir -p roms
          
          # 使用 MrChromebox 标准编译流程（参考 build-coreboot.yml）
          # 确保输出目录权限正确
          chmod 755 roms/
          chown -R 1001:1001 roms/ 2>/dev/null || true
          
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     echo '🔧 使用 MrChromebox build-uefi.sh 编译 kaisa...' && \
                     ./build-uefi.sh kaisa; BUILD_EXIT_CODE=\$? && \
                     echo \"📦 编译完成，退出码: \$BUILD_EXIT_CODE\" && \
                     echo '🔍 查找编译输出文件...' && \
                     find ~/dev -name '*.rom' -type f 2>/dev/null | head -5 && \
                     find . -name '*.rom' -type f 2>/dev/null | head -5 && \
                     find ../roms -name '*.rom' -type f 2>/dev/null | head -5 && \
                     echo '📋 检查输出目录权限...' && \
                     ls -la /home/coreboot/roms/ && \
                     echo '📋 复制 ROM 文件到输出目录...' && \
                     ROM_FILE=\$(find ../roms -name '*.rom' -type f 2>/dev/null | head -1) && \
                     if [ -n \"\$ROM_FILE\" ]; then \
                       echo \"找到 ROM 文件: \$ROM_FILE\" && \
                       echo '✅ ROM 文件已在正确位置，无需复制'; \
                     else \
                       echo '❌ 未找到编译生成的 ROM 文件'; \
                     fi && \
                     if [ \$BUILD_EXIT_CODE -eq 0 ] || [ \$BUILD_EXIT_CODE -eq 2 ]; then \
                       echo '✅ 编译成功（退出码 0 或 2 表示成功，2 通常表示有警告）'; \
                       exit 0; \
                     else \
                       echo \"❌ 编译失败，退出码: \$BUILD_EXIT_CODE\"; \
                       exit \$BUILD_EXIT_CODE; \
                     fi"
          
          # 显示编译结果
          echo "=== 编译完成的固件 / Compiled Firmware ==="
          ls -lh roms/

      - name: 📦 验证 PXE ROM 集成结果 / Verify PXE ROM Integration
        run: |
          echo "📦 验证 Realtek 8111 PXE ROM 集成结果"
          
          # 检查 ROM 文件（MrChromebox 生成的文件名模式）
          ROM_FILE=$(ls roms/*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            echo "📋 检查 roms 目录内容："
            ls -la roms/
            exit 1
          fi
          
          echo "✅ 找到 ROM 文件: $(basename "$ROM_FILE")"
          ls -lh "$ROM_FILE"
          
          # 使用 cbfstool 验证 PXE ROM 集成
          echo ""
          echo "🔍 验证 PXE ROM 集成状态..."
          CBFS_TOOL="./tools/cbfstool"
          
          if "$CBFS_TOOL" "$ROM_FILE" print 2>/dev/null | grep -q 'pci10ec,8168.rom'; then
            echo "✅ Realtek 网络启动支持已成功集成到固件中"
            echo ""
            echo "📋 PCI Option ROM 详细信息："
            "$CBFS_TOOL" "$ROM_FILE" print | grep -A 3 'pci10ec,8168.rom'
            echo ""
            echo "🎯 集成成功！固件现在支持："
            echo "  - RTL8111H 网卡网络启动"
            echo "  - PCI Option ROM 自动加载"
            echo "  - 兼容 RTL8168 系列 PXE ROM"
          else
            echo "❌ Realtek 网络启动支持未找到，可能集成失败"
            echo "📋 CBFS 内容："
            "$CBFS_TOOL" "$ROM_FILE" print 2>&1 || echo "  cbfstool 命令失败"
            exit 1
          fi
          
          # 显示完整的 CBFS 内容
          echo ""
          echo "📊 完整的 CBFS 内容："
          "$CBFS_TOOL" "$ROM_FILE" print
          
          # 生成校验和
          echo ""
          echo "🔐 生成固件校验和..."
          cd roms
          # 使用 sudo 删除旧的校验和文件
          sudo rm -f *.sha1 *.sha256 2>/dev/null || true
          
          # 为 ROM 生成校验和
          sudo bash -c "sha1sum '$ROM_BASENAME' > '$ROM_BASENAME.sha1'"
          sudo bash -c "sha256sum '$ROM_BASENAME' > '$ROM_BASENAME.sha256'"
          
          echo "✅ 校验和已生成"
          echo ""
          echo "📊 ROM 校验和："
          cat "$ROM_BASENAME.sha1"
          cat "$ROM_BASENAME.sha256"
          cd ..

      - name: 📝 生成集成报告 / Generate Integration Report
        run: |
          echo "📝 生成方案7集成报告"
          
          ROM_FILE=$(ls roms/*.rom | head -1)
          ROM_NAME=$(basename "$ROM_FILE")
          
          cat > integration_report.md << EOF
          # 方案7 - Realtek 8111 PXE ROM 集成报告
          
          ## 📋 构建信息
          
          - **构建日期**: $(date '+%Y-%m-%d %H:%M:%S')
          - **固件文件**: $ROM_NAME
          - **固件大小**: $(du -h "$ROM_FILE" | cut -f1)
          - **方案类型**: Realtek 8111 PXE ROM 集成
          
          ## 🎯 方案说明
          
          ### 技术实现
          - 使用 MrChromebox 的 EDK2 作为主要 payload
          - 集成 Realtek 8111 官方 PXE ROM 作为 PCI Option ROM
          - PCI Vendor ID: 0x10ec, Device ID: 0x8168
          - PCI Option ROM 命名: pci10ec,8168.rom
          
          ### 预期功能
          - ✅ 硬件层面启用网络启动
          - ✅ BIOS/UEFI 自动识别网卡的 PXE 能力
          - ✅ 无需额外驱动或配置
          
          ## 📊 集成状态
          
          ### PXE ROM 集成
          - PXE ROM 文件: rtl8111_ipxe.efi
          - CBFS 路径: pci10ec,8168.rom
          - 类型: PCI Option ROM
          
          ### 验证结果
          \`\`\`
          $(if [ -f "/root/coreboot-builder/tools/cbfstool" ]; then /root/coreboot-builder/tools/cbfstool roms/$ROM_NAME print | grep -A 3 'pci10ec,8168.rom' || echo 'PXE ROM 未找到'; else echo 'cbfstool 工具未找到'; fi)
          \`\`\`
          
          ## 🔐 校验和
          
          ### 固件校验和
          **SHA1**:
          \`\`\`
          $(cat "$ROM_NAME.sha1" 2>/dev/null || echo "未生成")
          \`\`\`
          
          **SHA256**:
          \`\`\`
          $(cat "$ROM_NAME.sha256" 2>/dev/null || echo "未生成")
          \`\`\`
          
          ## 📝 使用说明
          
          ### 刷写固件
          1. 下载固件文件和校验和文件
          2. 验证校验和确保文件完整性
          3. 使用 flashrom 刷写固件
          
          ### 启动测试和配置
          1. 刷写固件后重启设备
          2. 进入 BIOS/UEFI 设置
          3. **重要：配置网络启动选项**
             - 启用 PXE Boot
             - 启用 Network Boot
             - 启用 Legacy Boot（PCI Option ROM 需要）
          4. 设置启动顺序，添加网络启动
          5. 测试 PXE 网络启动功能
          
          ### 🔧 PXE 启动菜单不显示的解决方案
          
          **MrChromebox 固件配置方式：**
          
          #### A. EDK2 固件配置
          MrChromebox 使用 EDK2 作为 payload，配置方式与传统 BIOS 不同：
          
          - 🔧 **启动时按 F12** - 尝试直接进入网络启动
          - 🔧 **启动时按 ESC** - 进入 Boot Manager 菜单
          - 🔧 **启动时按 F2/F10** - 进入 EDK2 设置界面
          
          #### B. EDK2 设置选项
          在 EDK2 设置界面中查找：
          
          - ⚙️ **Boot Manager** - 检查是否有网络启动选项
          - ⚙️ **Boot Maintenance Manager** - 网络启动配置
          - ⚙️ **Device Manager** - PCI 设备配置
          - ⚙️ **Network Configuration** - 网络设置
          
          #### C. 可能的配置位置
          
          **1. Boot Manager 菜单**
          - 启动时按 ESC 进入
          - 查找 "Network Boot" 或 "PXE Boot" 选项
          
          **2. Device Manager**
          - 查找 "Network Controller" 或 "Realtek RTL8111"
          - 检查是否启用网络启动
          
          **3. Boot Maintenance Manager**
          - 查找 "Boot Options" 或 "Boot Order"
          - 添加网络启动到启动顺序
          
          #### D. 替代启动方法
          
          **如果菜单中没有 PXE 选项，尝试：**
          
          1. **直接启动键**
             - 启动时按 `F12` - 直接网络启动
             - 启动时按 `ESC` - Boot Manager
             - 启动时按 `F2/F10` - 设置界面
          
          2. **命令行启动**
             - 在 EDK2 Shell 中手动执行网络启动
             - 查找 `snponly.efi` 或 `ipxe.efi` 文件
          
          3. **验证 PCI Option ROM**
             - 确认 PCI Option ROM 已正确加载
             - 检查网卡是否被识别
          
          **注意：** MrChromebox 固件基于 EDK2，配置界面与传统 BIOS 不同，可能需要使用不同的按键组合进入设置。
          
          ## 💡 技术优势
          
          - ⭐ **最简单的集成方式** - 只需添加 PCI Option ROM
          - ⭐ **官方支持** - 使用 Realtek 或 iPXE 官方驱动
          - ⭐ **硬件原生** - 不依赖 payload 网络栈
          - ⭐ **高兼容性** - 自动识别网卡并启用 PXE
          
          ## 📊 方案对比
          
          | 特性 | 方案7 (PXE ROM) | 方案1 (iPXE) | 方案2 (iPXE Payload) |
          |------|----------------|--------------|---------------------|
          | 集成复杂度 | ⭐ 最简单 | ⭐⭐⭐ 中等 | ⭐⭐⭐⭐ 复杂 |
          | 官方支持 | ✅ Realtek/iPXE 官方 | ❌ 社区 | ❌ 社区 |
          | 网络兼容性 | ✅ 硬件原生 | ⚠️ 依赖驱动 | ✅ iPXE 驱动 |
          | 启动速度 | ⭐⭐⭐ 快 | ⭐⭐ 一般 | ⭐⭐ 一般 |
          | 功能丰富性 | ⭐⭐ 基础 PXE | ⭐⭐⭐⭐⭐ 高级功能 | ⭐⭐⭐⭐⭐ 高级功能 |
          
          ## 🔄 后续改进
          
          - [ ] 测试实际网络启动功能
          - [ ] 验证 WDS 服务器连接
          - [ ] 测试不同网络环境
          - [ ] 对比其他方案的性能
          
          ---
          
          **构建时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          EOF
          
          echo "✅ 集成报告已生成"
          cat integration_report.md

      - name: 上传固件 / Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: coreboot-kaisa-rtl8111-pxerom-${{ github.run_number }}
          path: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md

      - name: 创建 Release / Create Release
        if: github.event.inputs.release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: kaisa-rtl8111-pxerom-${{ github.run_number }}
          name: "Coreboot Kaisa - 方案7 (RTL8111 PXE ROM) #${{ github.run_number }}"
          body: |
            # 🎯 方案7：Realtek 8111 PXE ROM 集成
            
            ## 📋 方案说明
            
            - **集成方式**: Realtek 8111 PXE ROM 作为 PCI Option ROM
            - **主板**: Acer Chromebox CXI4 (kaisa)
            - **网卡**: Realtek RTL8111H (PCI ID: 10ec:8168)
            - **Payload**: MrChromebox EDK2
            
            ## 💡 技术优势
            
            - ⭐ **最简单的集成方式** - 只需添加 PCI Option ROM
            - ⭐ **官方支持** - 使用 Realtek 或 iPXE 官方驱动
            - ⭐ **硬件原生** - 不依赖 payload 网络栈
            - ⭐ **高兼容性** - 自动识别网卡并启用 PXE
            
            ## 🔐 文件校验
            
            请下载后验证 SHA1/SHA256 校验和确保文件完整性。
            
            ## 📝 使用说明
            
            1. 下载固件文件
            2. 验证校验和
            3. 使用 flashrom 刷写固件
            4. 重启后进入 BIOS/UEFI 设置
            5. **重要：启用网络启动选项**
               - 启用 PXE Boot
               - 启用 Network Boot  
               - 启用 Legacy Boot（PCI Option ROM 需要）
               - 设置启动模式为 Legacy 或混合模式
            6. 测试 PXE 网络启动功能
            
            ## 🔧 故障排除
            
            **MrChromebox 固件 PXE 启动方法：**
            
            **1. 直接启动键尝试：**
            - 启动时按 `F12` - 直接网络启动
            - 启动时按 `ESC` - 进入 Boot Manager 菜单
            - 启动时按 `F2/F10` - 进入 EDK2 设置界面
            
            **2. EDK2 设置界面查找：**
            - Boot Manager - 检查网络启动选项
            - Device Manager - 查找 Realtek RTL8111 网卡
            - Boot Maintenance Manager - 配置启动顺序
            
            **3. 如果仍无 PXE 选项：**
            - 确认 PCI Option ROM 已正确集成
            - 检查网卡是否被系统识别
            - 尝试在 EDK2 Shell 中手动执行网络启动
            
            ## ⚠️ 注意事项
            
            - 刷写固件前请备份原有固件
            - 确保电源稳定，刷写过程中不要断电
            - 建议先在测试设备上验证
            
            **构建时间**: ${{ github.event.repository.updated_at }}
          files: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


