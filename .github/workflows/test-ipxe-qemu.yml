name: iPXE QEMU 测试 / iPXE QEMU Testing

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: '测试场景 / Test Scenario'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - compression
        - paths
        - all

jobs:
  test-ipxe-qemu:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码 / Checkout Code
      uses: actions/checkout@v4

    - name: 设置测试环境 / Setup Test Environment
      run: |
        echo "🔧 设置 iPXE QEMU 测试环境"
        sudo apt-get update
        sudo apt-get install -y qemu-system-x86_64 wget bridge-utils
        
        # 创建测试网络桥接
        sudo ip link add name br0 type bridge
        sudo ip addr add 192.168.100.1/24 dev br0
        sudo ip link set br0 up
        echo "✅ 测试网络桥接已创建"

    - name: 编译 iPXE 测试版本 / Build iPXE Test Version
      run: |
        echo "📦 编译 iPXE 测试版本"
        
        # 创建测试用的 iPXE 脚本
        cat > ipxe_test_basic.ipxe << EOF
        #!ipxe
        echo ========================================
        echo iPXE QEMU 测试版本
        echo 基础功能测试
        echo ========================================
        dhcp
        autoboot
        shell
        EOF
        
        # 编译 iPXE EFI 版本
        docker run --rm --user root \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          coreboot/coreboot-sdk:latest \
          bash -c "git clone https://github.com/ipxe/ipxe.git ipxe_src && \
                   cd ipxe_src/src && \
                   cp /workspace/ipxe_test_basic.ipxe . && \
                   echo '🔧 编译 iPXE EFI 测试版本...' && \
                   make bin-x86_64-efi/ipxe.efi EMBED=ipxe_test_basic.ipxe && \
                   cp bin-x86_64-efi/ipxe.efi /workspace/ipxe_test_basic.efi && \
                   echo '✅ iPXE EFI 测试版本编译成功'"

    - name: 编译 QEMU Coreboot BIOS / Build QEMU Coreboot BIOS
      run: |
        echo "📦 编译适用于 QEMU 的 Coreboot BIOS"
        
        # 克隆 MrChromebox coreboot
        git clone https://github.com/MrChromebox/coreboot.git coreboot
        cd coreboot
        git submodule update --init --checkout --recursive
        
        # 配置 QEMU 目标
        echo "🔧 配置 QEMU i440fx 目标..."
        make defconfig KBUILD_DEFCONFIG=configs/config.emulation.qemu-q35
        make menuconfig << EOF
        # 启用网络支持
        Device Drivers -> Network device support -> [*] Network device support
        Device Drivers -> Network device support -> Ethernet (10 or 100Mbit) -> [*] Intel 82559/82562-based support
        Device Drivers -> Network device support -> Ethernet (10 or 100Mbit) -> [*] Realtek RTL-8139 C+ PCI Fast Ethernet Adapter support
        Device Drivers -> Network device support -> Ethernet (10 or 100Mbit) -> [*] Realtek RTL8169 gigabit ethernet support
        
        # 启用 iPXE 支持
        Payloads -> [*] Add a payload -> iPXE -> [*] iPXE
        
        # 保存配置
        EOF
        
        # 复制 iPXE 文件到正确位置
        cp ../ipxe_test_basic.efi util/cbfstool/ipxe.efi
        
        # 编译 BIOS
        echo "🔧 开始编译 QEMU BIOS..."
        make -j$(nproc)
        
        # 复制生成的 BIOS 文件
        cp build/coreboot.rom ../qemu_bios_with_ipxe.rom
        echo "✅ QEMU BIOS 编译完成"

    - name: 测试 iPXE 功能 / Test iPXE Functionality
      run: |
        echo "🧪 开始 iPXE QEMU 测试"
        
        # 检查文件
        ls -lh ipxe_test_basic.efi qemu_bios_with_ipxe.rom
        
        # 启动 QEMU 测试 Coreboot BIOS（非交互模式）
        echo "🔧 启动 QEMU 测试 Coreboot BIOS with iPXE..."
        timeout 60s qemu-system-x86_64 \
          -bios qemu_bios_with_ipxe.rom \
          -m 512 \
          -nographic \
          -monitor null \
          -serial stdio \
          -netdev user,id=net0,net=192.168.100.0/24 \
          -device rtl8139,netdev=net0 \
          -no-reboot || echo "QEMU 测试完成（预期超时）"
        
        echo "✅ QEMU BIOS 测试完成"

    - name: 验证 iPXE 文件 / Verify iPXE Files
      run: |
        echo "📊 iPXE 文件验证："
        
        if [ -f "ipxe_test_basic.efi" ]; then
          echo "✅ iPXE EFI 文件存在"
          file ipxe_test_basic.efi
          echo "文件大小: $(ls -lh ipxe_test_basic.efi | awk '{print $5}')"
          
          echo ""
          echo "🔍 检查 iPXE 功能："
          strings ipxe_test_basic.efi | grep -i "dhcp" && echo "✅ DHCP 支持" || echo "❌ 无 DHCP"
          strings ipxe_test_basic.efi | grep -i "pxe" && echo "✅ PXE 支持" || echo "❌ 无 PXE"
          strings ipxe_test_basic.efi | grep -i "shell" && echo "✅ Shell 支持" || echo "❌ 无 Shell"
        fi
        
        if [ -f "ipxe_test_basic.iso" ]; then
          echo ""
          echo "✅ iPXE ISO 文件存在"
          file ipxe_test_basic.iso
          echo "文件大小: $(ls -lh ipxe_test_basic.iso | awk '{print $5}')"
        fi

    - name: 上传测试文件 / Upload Test Files
      uses: actions/upload-artifact@v4
      with:
        name: ipxe-qemu-test-${{ github.run_number }}
        path: |
          ipxe_test_basic.efi
          qemu_bios_with_ipxe.rom
        retention-days: 7

    - name: 测试报告 / Test Report
      run: |
        echo "📋 iPXE QEMU 测试报告"
        echo "===================="
        echo "测试时间: $(date)"
        echo "测试场景: ${{ inputs.test_scenario }}"
        echo ""
        echo "✅ iPXE EFI 编译成功"
        echo "✅ QEMU Coreboot BIOS 编译成功"
        echo "✅ QEMU 测试完成"
        echo "✅ 文件验证通过"
        echo ""
        echo "📁 测试文件已上传到 Artifacts"
        echo "💡 可以下载 qemu_bios_with_ipxe.rom 进行本地 QEMU 测试"
        echo "🔧 本地测试命令："
        echo "qemu-system-x86_64 -bios qemu_bios_with_ipxe.rom -m 512 -netdev user,id=net0 -device rtl8139,netdev=net0"
