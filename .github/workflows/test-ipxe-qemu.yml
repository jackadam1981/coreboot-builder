name: iPXE QEMU 测试 / iPXE QEMU Testing

on:
  workflow_dispatch:
    inputs:
      test_scenario:
        description: '测试场景 / Test Scenario'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - compression
        - paths
        - all

jobs:
  test-ipxe-qemu:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码 / Checkout Code
      uses: actions/checkout@v4

    - name: 设置测试环境 / Setup Test Environment
      run: |
        echo "🔧 设置 iPXE QEMU 测试环境"
        sudo apt-get update
        sudo apt-get install -y qemu-system-x86_64 wget bridge-utils
        
        # 创建测试网络桥接
        sudo ip link add name br0 type bridge
        sudo ip addr add 192.168.100.1/24 dev br0
        sudo ip link set br0 up
        echo "✅ 测试网络桥接已创建"

    - name: 下载 iPXE 预编译文件 / Download iPXE Pre-compiled Files
      run: |
        echo "📦 下载 iPXE 预编译文件"
        
        # 创建测试目录
        mkdir -p ipxe_test
        
        # 下载官方预编译的 iPXE EFI 文件
        echo "🔧 下载 iPXE 官方预编译文件..."
        wget -O ipxe_test/ipxe-efi-x86_64.efi https://boot.ipxe.org/ipxe-efi-x86_64.efi
        wget -O ipxe_test/ipxe-efi-i386.efi https://boot.ipxe.org/ipxe-efi-i386.efi
        wget -O ipxe_test/ipxe-pxe.lkrn https://boot.ipxe.org/ipxe-pxe.lkrn
        wget -O ipxe_test/ipxe-undionly.kpxe https://boot.ipxe.org/ipxe-undionly.kpxe
        
        # 创建自定义 iPXE 脚本版本
        cat > ipxe_test/custom.ipxe << EOF
        #!ipxe
        echo ========================================
        echo iPXE 自定义测试版本
        echo 网络启动测试
        echo ========================================
        dhcp
        echo DHCP 配置完成
        autoboot
        echo 自动启动失败，进入 Shell
        shell
        EOF
        
        # 使用 iPXE 官方工具编译自定义脚本（如果有的话）
        echo "✅ iPXE 预编译文件下载完成"
        
        # 显示下载的文件
        ls -lh ipxe_test/

    - name: 编译 QEMU Coreboot BIOS / Build QEMU Coreboot BIOS
      run: |
        echo "📦 编译适用于 QEMU 的 Coreboot BIOS"
        
        # 克隆 MrChromebox coreboot
        git clone https://github.com/MrChromebox/coreboot.git coreboot
        cd coreboot
        git submodule update --init --checkout --recursive
        
        # 配置 QEMU 目标（启用 iPXE payload）
        echo "🔧 配置 QEMU Q35 目标 with iPXE payload..."
        make defconfig KBUILD_DEFCONFIG=configs/config.emulation.qemu-q35
        
        # 复制预编译的 iPXE 文件到正确位置
        cp ../ipxe_test/ipxe-efi-x86_64.efi util/cbfstool/ipxe.efi
        
        # 配置 iPXE payload
        make menuconfig << EOF
        # 启用网络支持
        Device Drivers -> Network device support -> [*] Network device support
        Device Drivers -> Network device support -> Ethernet (10 or 100Mbit) -> [*] Intel 82559/82562-based support
        Device Drivers -> Network device support -> Ethernet (10 or 100Mbit) -> [*] Realtek RTL-8139 C+ PCI Fast Ethernet Adapter support
        Device Drivers -> Network device support -> Ethernet (10 or 100Mbit) -> [*] Realtek RTL8169 gigabit ethernet support
        
        # 启用 iPXE payload（编译时集成）
        Payloads -> [*] Add a payload -> iPXE -> [*] iPXE
        
        # 保存配置
        EOF
        
        # 编译集成 iPXE 的 BIOS
        echo "🔧 开始编译集成 iPXE 的 QEMU BIOS..."
        make -j$(nproc)
        
        # 复制生成的 BIOS 文件
        cp build/coreboot.rom ../qemu_bios_with_ipxe.rom
        
        # 也编译一个不包含 iPXE 的基础版本用于对比
        echo "🔧 编译基础 BIOS 用于对比..."
        make menuconfig << EOF
        # 禁用 iPXE payload
        Payloads -> [ ] Add a payload
        
        # 保存配置
        EOF
        
        make -j$(nproc)
        cp build/coreboot.rom ../qemu_bios_base.rom
        
        echo "✅ QEMU BIOS 编译完成（包含集成 iPXE 版本和基础版本）"

    - name: 测试 iPXE 功能 / Test iPXE Functionality
      run: |
        echo "🧪 开始 iPXE QEMU 测试"
        
        # 检查文件
        ls -lh ipxe_test/ qemu_bios_with_ipxe.rom
        
        # 测试1：直接启动 iPXE EFI 文件
        echo "🔧 测试1：直接启动 iPXE EFI 文件..."
        timeout 30s qemu-system-x86_64 \
          -kernel ipxe_test/ipxe-efi-x86_64.efi \
          -m 512 \
          -nographic \
          -monitor null \
          -serial stdio \
          -netdev user,id=net0,net=192.168.100.0/24 \
          -device rtl8139,netdev=net0 \
          -no-reboot || echo "iPXE EFI 测试完成（预期超时）"
        
        # 测试2：使用 Coreboot BIOS
        echo "🔧 测试2：启动 Coreboot BIOS with iPXE..."
        timeout 60s qemu-system-x86_64 \
          -bios qemu_bios_with_ipxe.rom \
          -m 512 \
          -nographic \
          -monitor null \
          -serial stdio \
          -netdev user,id=net0,net=192.168.100.0/24 \
          -device rtl8139,netdev=net0 \
          -no-reboot || echo "Coreboot BIOS 测试完成（预期超时）"
        
        echo "✅ 所有 QEMU 测试完成"

    - name: 验证 iPXE 文件 / Verify iPXE Files
      run: |
        echo "📊 iPXE 文件验证："
        
        echo "📊 验证预编译 iPXE 文件："
        for file in ipxe_test/*; do
          if [ -f "$file" ]; then
            echo ""
            echo "📁 文件: $(basename $file)"
            file "$file"
            echo "大小: $(ls -lh $file | awk '{print $5}')"
            
            # 检查 iPXE 功能（仅对 EFI 文件）
            if [[ "$file" == *.efi ]]; then
              echo "🔍 功能检查："
              strings "$file" | grep -i "dhcp" && echo "✅ DHCP 支持" || echo "❌ 无 DHCP"
              strings "$file" | grep -i "pxe" && echo "✅ PXE 支持" || echo "❌ 无 PXE"
              strings "$file" | grep -i "shell" && echo "✅ Shell 支持" || echo "❌ 无 Shell"
            fi
          fi
        done
        
        if [ -f "qemu_bios_with_ipxe.rom" ]; then
          echo ""
          echo "✅ QEMU BIOS 文件存在"
          file qemu_bios_with_ipxe.rom
          echo "文件大小: $(ls -lh qemu_bios_with_ipxe.rom | awk '{print $5}')"
        fi

    - name: 上传测试文件 / Upload Test Files
      uses: actions/upload-artifact@v4
      with:
        name: ipxe-qemu-test-${{ github.run_number }}
        path: |
          ipxe_test/
          qemu_bios_base.rom
          qemu_bios_with_ipxe.rom
        retention-days: 7

    - name: 测试报告 / Test Report
      run: |
        echo "📋 iPXE QEMU 测试报告"
        echo "===================="
        echo "测试时间: $(date)"
        echo "测试场景: ${{ inputs.test_scenario }}"
        echo ""
        echo "✅ iPXE 预编译文件下载成功"
        echo "✅ QEMU Coreboot BIOS 编译成功"
        echo "✅ QEMU 测试完成"
        echo "✅ 文件验证通过"
        echo ""
        echo "📁 测试文件已上传到 Artifacts"
        echo "💡 可以下载 qemu_bios_with_ipxe.rom 进行本地 QEMU 测试"
        echo "🔧 本地测试命令："
        echo "qemu-system-x86_64 -bios qemu_bios_with_ipxe.rom -m 512 -netdev user,id=net0 -device rtl8139,netdev=net0"
