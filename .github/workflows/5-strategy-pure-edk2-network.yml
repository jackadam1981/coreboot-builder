name: 方案5 - 纯 EDK2 网络启动 / Strategy 5 - Pure EDK2 Network Boot

on:
  workflow_dispatch:
    inputs:
      release:
        description: "创建 Release 发布 / Create Release"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 显示方案信息 / Display Strategy Info
        run: |
          echo "=========================================="
          echo "🎯 方案5：纯 EDK2 网络启动"
          echo "=========================================="
          echo ""
          echo "📝 方案说明："
          echo "  - 仅使用 MrChromebox 的 EDK2 原生网络支持"
          echo "  - 不集成 iPXE，依赖 EDK2 的 PXE 功能"
          echo "  - 简化集成复杂度"
          echo ""
          echo "🎯 预期结果："
          echo "  ✅ EDK2 原生 PXE 支持"
          echo "  ✅ 启动菜单显示网络启动选项"
          echo "  ✅ 功能相对简单但稳定"
          echo ""
          echo "📊 技术实现："
          echo "  1. 配置 EDK2 网络支持"
          echo "  2. 编译 MrChromebox 固件"
          echo "  3. 验证 EDK2 PXE 功能"
          echo "  4. 不添加任何 iPXE 文件"
          echo "=========================================="

      - name: 检出构建仓库 / Checkout Builder Repository
        uses: actions/checkout@v4

      - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
        run: docker pull coreboot/coreboot-sdk:latest

      - name: 克隆 MrChromebox Coreboot 源码 / Clone Coreboot Source
        run: |
          echo "📥 克隆 MrChromebox coreboot（纯 EDK2 网络支持）"
          git clone https://github.com/MrChromebox/coreboot.git coreboot
          cd coreboot
          git submodule update --init --checkout --recursive

      - name: 配置 EDK2 网络支持 / Configure EDK2 Network Support
        run: |
          echo "📝 配置 MrChromebox kaisa 纯 EDK2 网络支持"
          cd coreboot
          
          # 检查配置文件是否存在
          if [ -f "configs/cml/config.kaisa.uefi" ]; then
            echo "✅ 找到现有配置文件"
            echo "📋 当前配置："
            cat configs/cml/config.kaisa.uefi
            
            # 检查是否已包含网络支持配置
            if grep -q "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" configs/cml/config.kaisa.uefi; then
              echo "✅ EDK2 网络支持配置已存在"
            else
              echo "📝 添加 EDK2 网络支持配置（方案5：纯 EDK2）"
              echo "" >> configs/cml/config.kaisa.uefi
              echo "# EDK2 网络支持配置（方案5：纯 EDK2，无 iPXE）" >> configs/cml/config.kaisa.uefi
              echo "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" >> configs/cml/config.kaisa.uefi
              echo "CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y" >> configs/cml/config.kaisa.uefi
              echo "CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y" >> configs/cml/config.kaisa.uefi
              echo "" >> configs/cml/config.kaisa.uefi
              echo "# 注意：方案5不使用 iPXE，仅依赖 EDK2 原生网络功能" >> configs/cml/config.kaisa.uefi
              echo "✅ EDK2 网络支持配置已添加"
            fi
          else
            echo "❌ 配置文件不存在"
            exit 1
          fi

      - name: 确认无 iPXE 依赖 / Confirm No iPXE Dependency
        run: |
          echo "🔍 确认方案5无 iPXE 依赖"
          
          # 检查是否有 iPXE 相关文件
          if [ -f "ipxe_x64.efi" ] || [ -d "ipxe" ] || [ -d "ipxe_test" ]; then
            echo "⚠️  发现 iPXE 相关文件，但方案5不使用 iPXE"
            echo "📋 清理 iPXE 相关文件..."
            rm -rf ipxe_x64.efi ipxe ipxe_test ipxe_files
            echo "✅ 已清理 iPXE 相关文件"
          else
            echo "✅ 确认无 iPXE 依赖"
          fi

      - name: 替换自定义 Logo / Replace Custom Logo
        run: |
          if [ -f "coreboot_logo.bmp" ]; then
            cp coreboot_logo.bmp coreboot/Documentation/coreboot_logo.bmp
            echo "✅ 已替换为自定义 Logo"
          else
            echo "ℹ️  使用默认 Logo"
          fi

      - name: 编译纯 EDK2 固件 / Build Pure EDK2 Firmware
        run: |
          mkdir -p roms
          echo "📦 编译纯 EDK2 固件（无 iPXE 依赖）"
          
          # 使用 MrChromebox 标准编译流程
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     echo '🔧 使用 MrChromebox build-uefi.sh 编译 kaisa（纯 EDK2）...' && \
                     ./build-uefi.sh kaisa && \
                     chmod 644 /home/coreboot/roms/*.rom && \
                     echo '✅ 纯 EDK2 固件编译完成'"

      - name: 验证纯 EDK2 固件 / Verify Pure EDK2 Firmware
        run: |
          echo "📦 验证纯 EDK2 固件"
          
          # 检查 ROM 文件
          ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            ls -la roms/
            exit 1
          fi
          
          echo "✅ 找到 ROM 文件: $(basename "$ROM_FILE")"
          ls -lh "$ROM_FILE"
          
          # 显示 CBFS 内容
          echo ""
          echo "📊 纯 EDK2 固件 CBFS 内容："
          coreboot/build/cbfstool "$ROM_FILE" print
          
          # 确认无 iPXE 相关条目
          echo ""
          echo "🔍 检查是否有 iPXE 相关条目："
          if coreboot/build/cbfstool "$ROM_FILE" print | grep -i "ipxe"; then
            echo "⚠️  发现 iPXE 相关条目（不应该存在）"
            coreboot/build/cbfstool "$ROM_FILE" print | grep -i "ipxe"
          else
            echo "✅ 确认无 iPXE 相关条目"
          fi
          
          # 检查 EDK2 payload
          echo ""
          echo "🔍 检查 EDK2 payload："
          if coreboot/build/cbfstool "$ROM_FILE" print | grep -i "payload"; then
            echo "✅ 找到 payload 条目："
            coreboot/build/cbfstool "$ROM_FILE" print | grep -i "payload"
          else
            echo "❌ 未找到 payload 条目"
          fi
          
          # 生成校验和
          echo ""
          echo "🔐 生成固件校验和..."
          cd roms
          rm -f *.sha1
          sha1sum "$(basename "$ROM_FILE")" > "$(basename "$ROM_FILE").sha1"
          echo "✅ 校验和已生成："
          cat *.sha1
          cd ..

      - name: 生成方案5测试报告 / Generate Strategy 5 Test Report
        run: |
          echo "📊 生成方案5测试报告"
          mkdir -p test-reports
          
          ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
          
          cat > test-reports/strategy5-test-report.md << EOF
          # 方案5测试报告 - 纯 EDK2 网络启动
          
          **测试时间**: $(date)
          **GitHub Actions Run**: ${{ github.run_number }}
          **MrChromebox 版本**: $(cd coreboot && git rev-parse HEAD)
          
          ## 方案说明
          
          - **方案名称**: 方案5 - 纯 EDK2 网络启动
          - **技术路线**: 仅使用 EDK2 原生网络支持，无 iPXE 依赖
          - **适用场景**: 需要简单稳定的网络启动功能
          
          ## 测试结果
          
          ### EDK2 网络配置
          - CONFIG_EDK2_NETWORK_PXE_SUPPORT: $(grep -q "CONFIG_EDK2_NETWORK_PXE_SUPPORT=y" coreboot/configs/cml/config.kaisa.uefi && echo "✅ 已启用" || echo "❌ 未启用")
          - CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT: $(grep -q "CONFIG_EDK2_NETWORK_HTTP_BOOT_SUPPORT=y" coreboot/configs/cml/config.kaisa.uefi && echo "✅ 已启用" || echo "❌ 未启用")
          - CONFIG_EDK2_NETWORK_ISCSI_SUPPORT: $(grep -q "CONFIG_EDK2_NETWORK_ISCSI_SUPPORT=y" coreboot/configs/cml/config.kaisa.uefi && echo "✅ 已启用" || echo "❌ 未启用")
          
          ### 固件状态
          - 固件编译: ✅ 成功
          - iPXE 依赖: ✅ 无依赖
          - EDK2 payload: $(coreboot/build/cbfstool "$ROM_FILE" print | grep -q "payload" && echo "✅ 存在" || echo "❌ 不存在")
          - iPXE 条目: $(coreboot/build/cbfstool "$ROM_FILE" print | grep -q "ipxe" && echo "⚠️ 存在" || echo "✅ 不存在")
          
          ### 固件信息
          - 固件文件: $(basename "$ROM_FILE")
          - 固件大小: $(ls -lh "$ROM_FILE" | awk '{print $5}')
          - SHA1 校验: $(cat roms/*.sha1)
          
          ## 结论
          
          $(if [ -f "$ROM_FILE" ] && ! coreboot/build/cbfstool "$ROM_FILE" print | grep -q "ipxe"; then
            echo "✅ **方案5测试成功**"
            echo ""
            echo "- EDK2 网络支持已启用"
            echo "- 固件无 iPXE 依赖"
            echo "- 可作为基础对比方案"
          else
            echo "⚠️ **方案5测试异常**"
            echo ""
            if coreboot/build/cbfstool "$ROM_FILE" print | grep -q "ipxe"; then
              echo "- 发现意外的 iPXE 条目"
            fi
            echo "- 需要进一步检查"
          fi)
          
          ## 下一步建议
          
          - 在实际硬件上测试 EDK2 PXE 功能
          - 验证启动菜单中的网络选项
          - 作为方案1的对比基准
          EOF
          
          cat test-reports/strategy5-test-report.md

      - name: 上传固件 / Upload Firmware Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: strategy5-firmware-${{ github.run_number }}
          path: roms/*.rom
          retention-days: 30

      - name: 上传校验和 / Upload Checksums
        uses: actions/upload-artifact@v4
        with:
          name: strategy5-checksums-${{ github.run_number }}
          path: roms/*.sha1
          retention-days: 30

      - name: 上传测试报告 / Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: strategy5-test-report-${{ github.run_number }}
          path: test-reports/
          retention-days: 30

      - name: 创建 Release / Create Release
        if: ${{ inputs.release == true }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: strategy5-firmware-${{ github.run_number }}
          name: 方案5固件 - 纯 EDK2 网络启动 / Strategy 5 - Pure EDK2 Network Boot
          body: |
            ## 方案5：纯 EDK2 网络启动
            
            **设备 / Device:** Acer Chromebox CXI4 (kaisa)
            **方案 / Strategy:** 方案5 - 纯 EDK2 网络启动
            **构建日期 / Build Date:** ${{ github.run_id }}
            
            ### 方案说明
            
            - **技术路线**: 仅使用 EDK2 原生网络支持
            - **网络支持**: EDK2 PXE/HTTP/iSCSI
            - **集成方式**: 无额外依赖，纯 EDK2
            
            ### 使用说明
            
            1. 下载固件文件
            2. 使用 flashrom 刷写：`flashrom -p internal -w firmware.rom`
            3. 重启进入 UEFI 启动菜单
            4. 选择网络启动选项
            
            ### 文件清单
            
            - 固件文件：`coreboot_edk2-kaisa-mrchromebox_*.rom`
            - SHA1 校验：`*.rom.sha1`
            - 测试报告：`strategy5-test-report.md`
            
          files: |
            roms/coreboot_*.rom
            roms/*.sha1
            test-reports/*.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
