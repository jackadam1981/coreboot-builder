name: 6-Kaisa Official (coreboot+tianocore EDK2)

on:
  # 支持推送触发和手动触发
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      release:
        description: "创建 Release 发布 / Create Release"
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出构建仓库 / Checkout Builder Repository
        uses: actions/checkout@v4

      - name: 拉取 Coreboot SDK 容器 / Pull Coreboot SDK
        run: docker pull coreboot/coreboot-sdk:latest

      - name: 克隆 Coreboot Official 源码 / Clone Coreboot Source
        run: |
          echo "📥 克隆 coreboot official"
          git clone https://github.com/coreboot/coreboot.git coreboot
          cd coreboot
          git submodule update --init --checkout --recursive

      - name: 下载预编译 PXE ROM / Download Pre-built PXE ROM
        run: |
          echo "📥 下载预编译的 iPXE ROM"
          cd coreboot
          
          # 下载预编译的 iPXE ROM 到 coreboot 根目录
          echo "📥 下载 iPXE ROM 到根目录..."
          
          # 方案1: 使用 iPXE 官方标准 PXE 文件 (337K)
          curl -L -o pxe.rom \
            "https://boot.ipxe.org/ipxe.pxe" || \
          curl -L -o pxe.rom \
            "https://boot.ipxe.org/undionly.kpxe"
          
          # 如果以上都失败，使用通用的 PXE ROM
          if [ ! -f pxe.rom ]; then
            echo "⚠️  标准 iPXE ROM 下载失败，使用通用 PXE ROM"
            # 下载通用的 PXE ROM
            curl -L -o pxe.rom \
              "https://boot.ipxe.org/undionly.kpxe"
          fi
          
          # 验证 ROM 文件
          if [ -f pxe.rom ]; then
            echo "✅ PXE ROM 下载成功"
            ls -la pxe.rom
            echo "📊 ROM 文件大小: $(du -h pxe.rom | cut -f1)"
          else
            echo "❌ PXE ROM 下载失败"
            exit 1
          fi

      - name: 创建 Kaisa 配置文件 / Create Kaisa Config
        run: |
          echo "📝 创建 coreboot official kaisa 配置"
          cd coreboot
          
          # 创建 kaisa 配置文件（基于官方源码）
          cat > .config << 'EOF'
          # Kaisa 主板基础配置
          CONFIG_VENDOR_GOOGLE=y
          CONFIG_BOARD_GOOGLE_KAISA=y
          
          # ROM 大小配置（Kaisa 使用 16MB）
          CONFIG_BOARD_ROMSIZE_KB_16384=y
          
          # EDK2 Payload 配置（使用官方 EDK2）
          CONFIG_PAYLOAD_EDK2=y
          CONFIG_EDK2_REPO_OFFICIAL=y
          CONFIG_EDK2_RELEASE=y
          CONFIG_EDK2_HAVE_EFI_SHELL=y
          
          # EDK2 体积优化（禁用非必要功能）
          # CONFIG_EDK2_PS2_SUPPORT is not set
          # CONFIG_EDK2_SERIAL_SUPPORT is not set
          
          # PXE ROM 支持配置
          CONFIG_PXE=y
          CONFIG_PXE_ROM=y
          CONFIG_PXE_ROM_FILE="pxe.rom"
          CONFIG_PXE_ROM_ID="10ec,8168"
          
          # Payload 压缩配置（暂不压缩，测试空间是否足够）
          CONFIG_COMPRESSED_PAYLOAD_NONE=y
          
          # Intel 芯片组系统稳定配置（适合 Kaisa 主板）
          CONFIG_SOC_INTEL_COMMON_BLOCK_POWER_LIMIT=y
          CONFIG_SOC_INTEL_COMMON_BLOCK_THERMAL=y
          CONFIG_SOUTHBRIDGE_INTEL_COMMON_WATCHDOG=y
          CONFIG_EC_GOOGLE_CHROMEEC_AUTO_FAN_CTRL=y
          EOF
          
          echo "✅ 配置文件创建完成"
          cat .config

      - name: 修复 PXE ROM Makefile 规则 / Fix PXE ROM Makefile Rule
        run: |
          echo "🔧 修复 PXE ROM Makefile 规则"
          cd coreboot
          
          # 修复 Makefile 规则，允许单独使用 CONFIG_PXE_ROM=y
          # 原规则：cbfs-files-$(CONFIG_PXE_ROM)$(CONFIG_BUILD_IPXE) += pci$(CONFIG_PXE_ROM_ID).rom
          # 替换为：cbfs-files-y += pci$(CONFIG_PXE_ROM_ID).rom (当 CONFIG_PXE_ROM=y 时)
          sed -i 's/^cbfs-files-\$(CONFIG_PXE_ROM)\$(CONFIG_BUILD_IPXE) += pci\$(CONFIG_PXE_ROM_ID)\.rom$/# 原规则已修复\nifeq (\$(CONFIG_PXE_ROM),y)\ncbfs-files-y += pci\$(CONFIG_PXE_ROM_ID).rom\nendif\nifeq (\$(CONFIG_BUILD_IPXE),y)\ncbfs-files-y += pci\$(CONFIG_PXE_ROM_ID).rom\nendif/' payloads/external/Makefile.mk
          
          echo "✅ Makefile 规则修复完成"

      - name: 📦 编译 Coreboot Official 固件 / Build Coreboot
        run: |
          echo "🔨 编译 coreboot official（kaisa 主板）"

          # 确保输出目录权限正确
          mkdir -p roms
          chmod 755 roms

          # 使用 coreboot official 标准编译流程
          docker run --rm --user root \
            -v ${{ github.workspace }}/coreboot:/home/coreboot/coreboot \
            -v ${{ github.workspace }}/roms:/home/coreboot/roms \
            -w /home/coreboot/coreboot \
            coreboot/coreboot-sdk:latest \
            bash -c "git config --global --add safe.directory /home/coreboot/coreboot && \
                     echo '📝 检查配置文件' && \
                     cat .config && \
                     echo '🔧 运行 make olddefconfig' && \
                     make olddefconfig && \
                     echo '🔨 开始编译' && \
                     make -j\$(nproc) && \
                     echo '📦 复制编译结果' && \
                     cp build/coreboot.rom /home/coreboot/roms/coreboot_official-kaisa_\$(date +%Y%m%d).rom && \
                     chmod 644 /home/coreboot/roms/*.rom && \
                     echo '✅ coreboot official 编译完成'"

      - name: 验证编译结果 / Verify Build Results
        run: |
          echo "📦 验证编译结果"

          # 检查 ROM 文件
          ROM_FILE=$(ls roms/coreboot_*.rom | head -1)
          if [ -z "$ROM_FILE" ]; then
            echo "❌ 未找到 ROM 文件"
            ls -la roms/
            exit 1
          fi

          echo "✅ 找到 ROM 文件: $(basename "$ROM_FILE")"
          ls -lh "$ROM_FILE"

          # 使用仓库内 tools/cbfstool 打印 ROM 结构（仅展示，不作为成败依据）
          echo "📦 使用本仓库 tools/cbfstool 打印 ROM 结构"
          CBFSTOOL="${{ github.workspace }}/tools/cbfstool"
          chmod +x "$CBFSTOOL" 2>/dev/null || true
          "$CBFSTOOL" "$ROM_FILE" print || echo "⚠️ cbfstool 打印失败（不影响构建产物上传）"

      - name: 上传固件 / Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: coreboot-official-kaisa-pxerom-${{ github.run_number }}
          path: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md

      - name: 创建 Release / Create Release
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.release) || (github.event_name != 'workflow_dispatch') }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: kaisa-official-pxerom-${{ github.run_number }}
          name: "Coreboot Official Kaisa - 方案6 (RTL8111 PXE ROM) #${{ github.run_number }}"
          body: |
            # 🎯 方案6：Coreboot Official + Realtek 8111 PXE ROM 集成

              使用 coreboot official 源码编译，已在编译前自动下载预编译 iPXE ROM 并追加 PXE ROM 支持配置：
              - 源码：https://github.com/coreboot/coreboot (官方仓库)
              - EDK2：CONFIG_EDK2_REPO_OFFICIAL (官方 tianocore/edk2)
              - 下载预编译的 iPXE ROM 到 coreboot 根目录 (pxe.rom)
              - 修复 Makefile 规则，避免重复添加 PXE ROM 到 CBFS
              - CONFIG_PXE=y
              - CONFIG_PXE_ROM=y
              - CONFIG_PXE_ROM_FILE="pxe.rom" (下载到根目录)
              - CONFIG_PXE_ROM_ID="10ec,8168" (Realtek RTL8111 网卡)
              
              注意：官方 EDK2 不支持 CONFIG_EDK2_LOAD_OPTION_ROMS（MrChromebox 专有特性）

              同时追加 Intel 芯片组稳定性相关配置（适配 Kaisa 主板）：
             - CONFIG_SOC_INTEL_COMMON_BLOCK_POWER_LIMIT=y
             - CONFIG_SOC_INTEL_COMMON_BLOCK_THERMAL=y
             - CONFIG_SOUTHBRIDGE_INTEL_COMMON_WATCHDOG=y
             - CONFIG_EC_GOOGLE_CHROMEEC_AUTO_FAN_CTRL=y

             **构建时间**: ${{ github.event.repository.updated_at }}
          files: |
            roms/*.rom
            roms/*.sha1
            roms/*.sha256
            integration_report.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
