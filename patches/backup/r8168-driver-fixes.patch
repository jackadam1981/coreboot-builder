--- a/src/drivers/net/r8168.c	2025-10-24 18:11:41.757742724 +0800
+++ b/src/drivers/net/r8168.c	2025-10-25 11:05:00.000000000 +0800
@@ -245,8 +245,12 @@
 	inl(io_base);
 	/* Some boards (e.g. asus/p8z77-v_le_plus) need the MAC address set here too */
 	if (CONFIG(RT8168_PUT_MAC_TO_ERI)) {
+		printk(BIOS_DEBUG, "r8168: Programming MAC to ERI registers...\n");
+		u8 revision = pci_read_config8(dev, PCI_REVISION_ID);
+		printk(BIOS_DEBUG, "r8168: Device revision ID: 0x%02x\n", revision);
 		switch (pci_read_config8(dev, PCI_REVISION_ID)) {
 		case 6:
+			printk(BIOS_DEBUG, "r8168: Programming ERI for RTL8168 revision 6\n");
 			outl((maclo & 0xffff) << 16, io_base + ERIDR);
 			inl(io_base + ERIDR);
 			outl(0x8000f0f0, io_base + ERIAR);
@@ -256,6 +260,7 @@
 			outl(0x8000f0f4, io_base + ERIAR);
 			break;
 		case 9:
+			printk(BIOS_DEBUG, "r8168: Programming ERI for RTL8168 revision 9\n");
 			outl(maclo, io_base + ERIDR);
 			inl(io_base + ERIDR);
 			outl(0x8000f0e0, io_base + ERIAR);
@@ -264,6 +269,21 @@
 			inl(io_base + ERIDR);
 			outl(0x800030e4, io_base + ERIAR);
 			break;
+		case 12:
+		case 13:
+		case 14:
+		case 15:
+			/* RTL8111H revision 12-15 ERI programming */
+			printk(BIOS_DEBUG, "r8168: Programming ERI for RTL8111H revision %d\n", revision);
+			outl(maclo, io_base + ERIDR);
+			inl(io_base + ERIDR);
+			outl(0x8000f0e0, io_base + ERIAR);
+			inl(io_base + ERIAR);
+			outl(machi, io_base + ERIDR);
+			inl(io_base + ERIDR);
+			outl(0x800030e4, io_base + ERIAR);
+			printk(BIOS_DEBUG, "r8168: ERI programming completed for RTL8111H\n");
+			break;
 		}
 		udelay(1000);
 	}
