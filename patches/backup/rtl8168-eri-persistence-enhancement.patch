--- a/src/drivers/net/r8168.c
+++ b/src/drivers/net/r8168.c
@@ -200,6 +200,7 @@ static void program_mac_address(struct device *dev, u16 io_base)
 	/* Some boards (e.g. asus/p8z77-v_le_plus) need the MAC address set here too */
 	if (CONFIG(RT8168_PUT_MAC_TO_ERI)) {
 		printk(BIOS_DEBUG, "r8168: Programming MAC to ERI registers...\n");
+		printk(BIOS_DEBUG, "r8168: MAC address: %02x:%02x:%02x:%02x:%02x:%02x\n",
+		       mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
 		u8 revision = pci_read_config8(dev, PCI_REVISION_ID);
 		printk(BIOS_DEBUG, "r8168: Device revision ID: 0x%02x\n", revision);
 		switch (pci_read_config8(dev, PCI_REVISION_ID)) {
@@ -220,6 +221,25 @@ static void program_mac_address(struct device *dev, u16 io_base)
 			printk(BIOS_DEBUG, "r8168: ERI programming completed for RTL8111H\n");
 			break;
 		}
+		
+		/* Additional ERI persistence settings for all revisions */
+		printk(BIOS_DEBUG, "r8168: Setting additional ERI persistence...\n");
+		
+		/* Ensure ERI registers are properly locked and persistent */
+		/* Set ERI address to MAC low register and verify */
+		outl(0x8000f0e0, io_base + ERIAR);
+		inl(io_base + ERIAR);
+		u32 eri_mac_lo = inl(io_base + ERIDR);
+		printk(BIOS_DEBUG, "r8168: ERI MAC low readback: 0x%08x\n", eri_mac_lo);
+		
+		/* Set ERI address to MAC high register and verify */
+		outl(0x800030e4, io_base + ERIAR);
+		inl(io_base + ERIAR);
+		u32 eri_mac_hi = inl(io_base + ERIDR);
+		printk(BIOS_DEBUG, "r8168: ERI MAC high readback: 0x%08x\n", eri_mac_hi);
+		
+		/* Verify MAC address is correctly stored in ERI */
+		if (eri_mac_lo == maclo && eri_mac_hi == machi) {
+			printk(BIOS_DEBUG, "r8168: ERI MAC address verification successful\n");
+		} else {
+			printk(BIOS_ERR, "r8168: ERI MAC address verification failed!\n");
+			printk(BIOS_ERR, "r8168: Expected: 0x%08x 0x%08x\n", maclo, machi);
+			printk(BIOS_ERR, "r8168: Actual: 0x%08x 0x%08x\n", eri_mac_lo, eri_mac_hi);
+		}
+		
 		printk(BIOS_DEBUG, "r8168: ERI programming completed\n");
 		udelay(1000);
 	}

