--- a/src/drivers/net/r8168.c
+++ b/src/drivers/net/r8168.c
@@ -1,5 +1,6 @@
 #include <cbfs.h>
 #include <acpi/acpi_device.h>
 #include <acpi/acpigen.h>
 #include <string.h>
 #include <arch/io.h>
 #include <console/console.h>
@@ -8,6 +9,7 @@
 #include <device/pci_ops.h>
 #include <device/pci_ids.h>
 #include <delay.h>
 #include <fmap.h>
 #include <types.h>
 #include "chip.h"
+#include <drivers/vpd/vpd.h>
 
 #define MACLEN 18
@@ -200,6 +202,20 @@ static enum cb_err fetch_mac_vpd_key(u8 *macstrbuf, const char *vpd_key)
 {
 	struct region_device rdev;
 	void *search_address;
 	size_t search_length;
 	size_t offset;
+
+	/* Try using the proper VPD parsing function first */
+	const char *vpd_value;
+	size_t vpd_size;
+	vpd_value = vpd_find(vpd_key, &vpd_size, VPD_RO);
+	if (vpd_value && vpd_size > 0) {
+		/* Copy the value to macstrbuf, ensuring null termination */
+		int copy_size = MIN(vpd_size, MACLEN - 1);
+		memcpy(macstrbuf, vpd_value, copy_size);
+		macstrbuf[copy_size] = '\0';
+		printk(BIOS_DEBUG, "r8168: Found MAC in VPD using vpd_find: %s\n", macstrbuf);
+		return CB_SUCCESS;
+	}
+	printk(BIOS_DEBUG, "r8168: vpd_find failed, trying legacy method\n");
 
 	if (fmap_locate_area_as_rdev("RO_VPD", &rdev)) {
 		printk(BIOS_ERR, "Couldn't find RO_VPD region.");
@@ -300,6 +316,18 @@ static void program_mac_address(struct device *dev)
 		case 9:
 			/* RTL8111H revision 9 ERI programming */
 			printk(BIOS_DEBUG, "r8168: Programming ERI for RTL8111H revision %d\n", pci_read_config8(dev, PCI_REVISION_ID));
 			outl(maclo, io_base + ERIDR);
 			inl(io_base + ERIDR);
 			outl(0x8000f0e0, io_base + ERIAR);
 			inl(io_base + ERIAR);
 			outl(machi, io_base + ERIDR);
 			inl(io_base + ERIDR);
 			outl(0x800030e4, io_base + ERIAR);
 			printk(BIOS_DEBUG, "r8168: ERI programming completed for RTL8111H\n");
 			break;
+		case 12:
+		case 13:
+		case 14:
+		case 15:
+			/* RTL8111H revision 12-15 ERI programming */
+			printk(BIOS_DEBUG, "r8168: Programming ERI for RTL8111H revision %d\n", pci_read_config8(dev, PCI_REVISION_ID));
+			outl(maclo, io_base + ERIDR);
+			inl(io_base + ERIDR);
+			outl(0x8000f0e0, io_base + ERIAR);
+			inl(io_base + ERIAR);
+			outl(machi, io_base + ERIDR);
+			inl(io_base + ERIDR);
+			outl(0x800030e4, io_base + ERIAR);
+			printk(BIOS_DEBUG, "r8168: ERI programming completed for RTL8111H\n");
+			break;
 		default:
 			printk(BIOS_WARNING, "r8168: Unsupported revision %d\n", pci_read_config8(dev, PCI_REVISION_ID));
 			break;
